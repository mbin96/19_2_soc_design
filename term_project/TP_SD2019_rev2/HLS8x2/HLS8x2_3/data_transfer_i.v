// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_transfer_i (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ifmap_TDATA,
        ifmap_TVALID,
        ifmap_TREADY,
        I_BRAM_0_address0,
        I_BRAM_0_ce0,
        I_BRAM_0_we0,
        I_BRAM_0_d0,
        I_BRAM_1_address0,
        I_BRAM_1_ce0,
        I_BRAM_1_we0,
        I_BRAM_1_d0,
        I_BRAM_2_address0,
        I_BRAM_2_ce0,
        I_BRAM_2_we0,
        I_BRAM_2_d0,
        I_BRAM_3_address0,
        I_BRAM_3_ce0,
        I_BRAM_3_we0,
        I_BRAM_3_d0,
        I_BRAM_4_address0,
        I_BRAM_4_ce0,
        I_BRAM_4_we0,
        I_BRAM_4_d0,
        I_BRAM_5_address0,
        I_BRAM_5_ce0,
        I_BRAM_5_we0,
        I_BRAM_5_d0,
        I_BRAM_6_address0,
        I_BRAM_6_ce0,
        I_BRAM_6_we0,
        I_BRAM_6_d0,
        I_BRAM_7_address0,
        I_BRAM_7_ce0,
        I_BRAM_7_we0,
        I_BRAM_7_d0,
        c,
        f
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] ifmap_TDATA;
input   ifmap_TVALID;
output   ifmap_TREADY;
output  [7:0] I_BRAM_0_address0;
output   I_BRAM_0_ce0;
output   I_BRAM_0_we0;
output  [15:0] I_BRAM_0_d0;
output  [7:0] I_BRAM_1_address0;
output   I_BRAM_1_ce0;
output   I_BRAM_1_we0;
output  [15:0] I_BRAM_1_d0;
output  [7:0] I_BRAM_2_address0;
output   I_BRAM_2_ce0;
output   I_BRAM_2_we0;
output  [15:0] I_BRAM_2_d0;
output  [7:0] I_BRAM_3_address0;
output   I_BRAM_3_ce0;
output   I_BRAM_3_we0;
output  [15:0] I_BRAM_3_d0;
output  [7:0] I_BRAM_4_address0;
output   I_BRAM_4_ce0;
output   I_BRAM_4_we0;
output  [15:0] I_BRAM_4_d0;
output  [7:0] I_BRAM_5_address0;
output   I_BRAM_5_ce0;
output   I_BRAM_5_we0;
output  [15:0] I_BRAM_5_d0;
output  [7:0] I_BRAM_6_address0;
output   I_BRAM_6_ce0;
output   I_BRAM_6_we0;
output  [15:0] I_BRAM_6_d0;
output  [7:0] I_BRAM_7_address0;
output   I_BRAM_7_ce0;
output   I_BRAM_7_we0;
output  [15:0] I_BRAM_7_d0;
input  [8:0] c;
input  [2:0] f;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ifmap_TREADY;
reg I_BRAM_0_ce0;
reg I_BRAM_0_we0;
reg I_BRAM_1_ce0;
reg I_BRAM_1_we0;
reg I_BRAM_2_ce0;
reg I_BRAM_2_we0;
reg I_BRAM_3_ce0;
reg I_BRAM_3_we0;
reg I_BRAM_4_ce0;
reg I_BRAM_4_we0;
reg I_BRAM_5_ce0;
reg I_BRAM_5_we0;
reg I_BRAM_6_ce0;
reg I_BRAM_6_we0;
reg I_BRAM_7_ce0;
reg I_BRAM_7_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ifmap_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_flatten1_fu_341_p2;
reg   [67:0] indvar_flatten1_reg_200;
reg   [31:0] i_reg_211;
reg   [35:0] indvar_flatten_reg_220;
reg   [3:0] j_reg_231;
reg   [31:0] k_reg_242;
wire   [2:0] tmp_10_fu_261_p1;
reg   [2:0] tmp_10_reg_503;
wire   [9:0] tmp_4_fu_283_p2;
reg   [9:0] tmp_4_reg_508;
wire  signed [3:0] f_cast_fu_289_p1;
reg  signed [3:0] f_cast_reg_513;
wire    ap_CS_fsm_state2;
wire   [31:0] f_cast2_fu_293_p1;
reg   [31:0] f_cast2_reg_518;
wire   [31:0] c_cast1_fu_305_p1;
wire   [31:0] tmp_2_fu_314_p1;
reg   [31:0] tmp_2_reg_530;
wire   [67:0] bound6_fu_329_p2;
reg   [67:0] bound6_reg_535;
wire   [0:0] exitcond1_mid_fu_335_p2;
reg   [0:0] exitcond1_mid_reg_540;
reg   [0:0] exitcond_flatten1_reg_545;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [67:0] indvar_flatten_next1_fu_346_p2;
wire   [31:0] tmp_17_t_mid2_v_v_fu_379_p3;
reg   [31:0] tmp_17_t_mid2_v_v_reg_554;
wire   [2:0] tmp_17_t_mid2_fu_391_p2;
reg   [2:0] tmp_17_t_mid2_reg_559;
reg   [2:0] ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559;
wire   [3:0] tmp_4_mid2_fu_421_p3;
reg   [3:0] tmp_4_mid2_reg_563;
reg   [15:0] ifmap_read_reg_570;
reg   [15:0] ap_reg_pp0_iter1_ifmap_read_reg_570;
wire   [8:0] tmp_13_fu_429_p1;
reg   [8:0] tmp_13_reg_582;
wire   [31:0] k_2_fu_433_p2;
wire   [35:0] indvar_flatten_next_fu_445_p3;
wire   [8:0] tmp_6_fu_481_p2;
reg   [8:0] tmp_6_reg_597;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] ap_phi_mux_i_phi_fu_214_p4;
reg   [3:0] ap_phi_mux_j_phi_fu_235_p4;
wire   [63:0] tmp_17_cast_fu_487_p1;
wire   [8:0] tmp_fu_255_p2;
wire   [0:0] tmp_3_fu_265_p2;
wire   [8:0] smax3_fu_271_p3;
wire   [9:0] smax3_cast_fu_279_p1;
wire   [9:0] c_cast1_cast_fu_251_p1;
wire   [4:0] f_cast2_cast1_fu_297_p1;
wire   [4:0] tmp_s_fu_308_p2;
wire  signed [31:0] tmp_14_cast_fu_322_p1;
wire   [31:0] bound6_fu_329_p1;
wire   [5:0] f_cast2_cast_fu_301_p1;
wire   [5:0] tmp_11_cast_fu_318_p1;
wire   [0:0] exitcond_flatten_fu_358_p2;
wire   [31:0] i_1_fu_352_p2;
wire   [2:0] tmp_11_fu_387_p1;
wire   [0:0] exitcond_fu_396_p2;
wire   [3:0] j_mid_fu_364_p3;
wire   [0:0] exitcond1_mid1_fu_401_p3;
wire   [31:0] k_mid_fu_372_p3;
wire   [3:0] j_2_fu_408_p2;
wire   [31:0] k_mid2_fu_414_p3;
wire   [35:0] indvar_flatten_op_fu_439_p2;
wire   [7:0] tmp_12_fu_456_p3;
wire   [8:0] p_shl1_cast_fu_463_p1;
wire   [8:0] tmp_4_mid2_cast_fu_453_p1;
wire   [8:0] tmp_14_fu_473_p1;
wire   [8:0] tmp_5_fu_467_p2;
wire   [8:0] tmp_15_fu_476_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [67:0] bound6_fu_329_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_545 == 1'd0))) begin
        i_reg_211 <= tmp_17_t_mid2_v_v_reg_554;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_211 <= c_cast1_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_341_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten1_reg_200 <= indvar_flatten_next1_fu_346_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten1_reg_200 <= 68'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_341_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_220 <= indvar_flatten_next_fu_445_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_220 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_545 == 1'd0))) begin
        j_reg_231 <= tmp_4_mid2_reg_563;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_231 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_341_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_242 <= k_2_fu_433_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_242 <= f_cast2_fu_293_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_ifmap_read_reg_570 <= ifmap_read_reg_570;
        ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 <= tmp_17_t_mid2_reg_559;
        exitcond_flatten1_reg_545 <= exitcond_flatten1_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound6_reg_535 <= bound6_fu_329_p2;
        exitcond1_mid_reg_540 <= exitcond1_mid_fu_335_p2;
        f_cast2_reg_518[3 : 0] <= f_cast2_fu_293_p1[3 : 0];
        f_cast_reg_513 <= f_cast_fu_289_p1;
        tmp_2_reg_530[4 : 0] <= tmp_2_fu_314_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ifmap_read_reg_570 <= ifmap_TDATA;
        tmp_13_reg_582 <= tmp_13_fu_429_p1;
        tmp_17_t_mid2_reg_559 <= tmp_17_t_mid2_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_10_reg_503 <= tmp_10_fu_261_p1;
        tmp_4_reg_508 <= tmp_4_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_341_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_17_t_mid2_v_v_reg_554 <= tmp_17_t_mid2_v_v_fu_379_p3;
        tmp_4_mid2_reg_563 <= tmp_4_mid2_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_545 == 1'd0))) begin
        tmp_6_reg_597 <= tmp_6_fu_481_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_0_ce0 = 1'b1;
    end else begin
        I_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_0_we0 = 1'b1;
    end else begin
        I_BRAM_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_1_ce0 = 1'b1;
    end else begin
        I_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_1_we0 = 1'b1;
    end else begin
        I_BRAM_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_2_ce0 = 1'b1;
    end else begin
        I_BRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_2_we0 = 1'b1;
    end else begin
        I_BRAM_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_3_ce0 = 1'b1;
    end else begin
        I_BRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_3_we0 = 1'b1;
    end else begin
        I_BRAM_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_4_ce0 = 1'b1;
    end else begin
        I_BRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_4_we0 = 1'b1;
    end else begin
        I_BRAM_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_5_ce0 = 1'b1;
    end else begin
        I_BRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_5_we0 = 1'b1;
    end else begin
        I_BRAM_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_6_ce0 = 1'b1;
    end else begin
        I_BRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_6_we0 = 1'b1;
    end else begin
        I_BRAM_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_7_ce0 = 1'b1;
    end else begin
        I_BRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_17_t_mid2_reg_559 == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_7_we0 = 1'b1;
    end else begin
        I_BRAM_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_341_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten1_reg_545 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_214_p4 = tmp_17_t_mid2_v_v_reg_554;
    end else begin
        ap_phi_mux_i_phi_fu_214_p4 = i_reg_211;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten1_reg_545 == 1'd0))) begin
        ap_phi_mux_j_phi_fu_235_p4 = tmp_4_mid2_reg_563;
    end else begin
        ap_phi_mux_j_phi_fu_235_p4 = j_reg_231;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_fu_341_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifmap_TDATA_blk_n = ifmap_TVALID;
    end else begin
        ifmap_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_fu_341_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ifmap_TREADY = 1'b1;
    end else begin
        ifmap_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten1_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten1_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_BRAM_0_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_0_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign I_BRAM_1_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_1_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign I_BRAM_2_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_2_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign I_BRAM_3_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_3_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign I_BRAM_4_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_4_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign I_BRAM_5_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_5_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign I_BRAM_6_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_6_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign I_BRAM_7_address0 = tmp_17_cast_fu_487_p1;

assign I_BRAM_7_d0 = ap_reg_pp0_iter1_ifmap_read_reg_570;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_flatten1_fu_341_p2 == 1'd0) & (ifmap_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_flatten1_fu_341_p2 == 1'd0) & (ifmap_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((exitcond_flatten1_fu_341_p2 == 1'd0) & (ifmap_TVALID == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound6_fu_329_p1 = bound6_fu_329_p10;

assign bound6_fu_329_p10 = $unsigned(tmp_14_cast_fu_322_p1);

assign bound6_fu_329_p2 = (68'd225 * bound6_fu_329_p1);

assign c_cast1_cast_fu_251_p1 = c;

assign c_cast1_fu_305_p1 = c;

assign exitcond1_mid1_fu_401_p3 = ((exitcond_flatten_fu_358_p2[0:0] === 1'b1) ? exitcond1_mid_reg_540 : exitcond_fu_396_p2);

assign exitcond1_mid_fu_335_p2 = ((f_cast2_cast_fu_301_p1 != tmp_11_cast_fu_318_p1) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_341_p2 = ((indvar_flatten1_reg_200 == bound6_reg_535) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_358_p2 = ((indvar_flatten_reg_220 == 36'd225) ? 1'b1 : 1'b0);

assign exitcond_fu_396_p2 = ((k_reg_242 != tmp_2_reg_530) ? 1'b1 : 1'b0);

assign f_cast2_cast1_fu_297_p1 = $unsigned(f_cast_fu_289_p1);

assign f_cast2_cast_fu_301_p1 = $unsigned(f_cast_fu_289_p1);

assign f_cast2_fu_293_p1 = $unsigned(f_cast_fu_289_p1);

assign f_cast_fu_289_p1 = $signed(f);

assign i_1_fu_352_p2 = (32'd1 + ap_phi_mux_i_phi_fu_214_p4);

assign indvar_flatten_next1_fu_346_p2 = (indvar_flatten1_reg_200 + 68'd1);

assign indvar_flatten_next_fu_445_p3 = ((exitcond_flatten_fu_358_p2[0:0] === 1'b1) ? 36'd1 : indvar_flatten_op_fu_439_p2);

assign indvar_flatten_op_fu_439_p2 = (indvar_flatten_reg_220 + 36'd1);

assign j_2_fu_408_p2 = (4'd1 + j_mid_fu_364_p3);

assign j_mid_fu_364_p3 = ((exitcond_flatten_fu_358_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j_phi_fu_235_p4);

assign k_2_fu_433_p2 = (k_mid2_fu_414_p3 + 32'd1);

assign k_mid2_fu_414_p3 = ((exitcond1_mid1_fu_401_p3[0:0] === 1'b1) ? k_mid_fu_372_p3 : f_cast2_reg_518);

assign k_mid_fu_372_p3 = ((exitcond_flatten_fu_358_p2[0:0] === 1'b1) ? f_cast2_reg_518 : k_reg_242);

assign p_shl1_cast_fu_463_p1 = tmp_12_fu_456_p3;

assign smax3_cast_fu_279_p1 = smax3_fu_271_p3;

assign smax3_fu_271_p3 = ((tmp_3_fu_265_p2[0:0] === 1'b1) ? c : tmp_fu_255_p2);

assign tmp_10_fu_261_p1 = c[2:0];

assign tmp_11_cast_fu_318_p1 = tmp_s_fu_308_p2;

assign tmp_11_fu_387_p1 = tmp_17_t_mid2_v_v_fu_379_p3[2:0];

assign tmp_12_fu_456_p3 = {{tmp_4_mid2_reg_563}, {4'd0}};

assign tmp_13_fu_429_p1 = k_mid2_fu_414_p3[8:0];

assign tmp_14_cast_fu_322_p1 = $signed(tmp_4_reg_508);

assign tmp_14_fu_473_p1 = $unsigned(f_cast_reg_513);

assign tmp_15_fu_476_p2 = (tmp_13_reg_582 - tmp_14_fu_473_p1);

assign tmp_17_cast_fu_487_p1 = tmp_6_reg_597;

assign tmp_17_t_mid2_fu_391_p2 = (tmp_11_fu_387_p1 - tmp_10_reg_503);

assign tmp_17_t_mid2_v_v_fu_379_p3 = ((exitcond_flatten_fu_358_p2[0:0] === 1'b1) ? i_1_fu_352_p2 : ap_phi_mux_i_phi_fu_214_p4);

assign tmp_2_fu_314_p1 = tmp_s_fu_308_p2;

assign tmp_3_fu_265_p2 = ((c > tmp_fu_255_p2) ? 1'b1 : 1'b0);

assign tmp_4_fu_283_p2 = (smax3_cast_fu_279_p1 - c_cast1_cast_fu_251_p1);

assign tmp_4_mid2_cast_fu_453_p1 = tmp_4_mid2_reg_563;

assign tmp_4_mid2_fu_421_p3 = ((exitcond1_mid1_fu_401_p3[0:0] === 1'b1) ? j_mid_fu_364_p3 : j_2_fu_408_p2);

assign tmp_5_fu_467_p2 = (p_shl1_cast_fu_463_p1 - tmp_4_mid2_cast_fu_453_p1);

assign tmp_6_fu_481_p2 = (tmp_5_fu_467_p2 + tmp_15_fu_476_p2);

assign tmp_fu_255_p2 = (9'd8 + c);

assign tmp_s_fu_308_p2 = (5'd15 + f_cast2_cast1_fu_297_p1);

always @ (posedge ap_clk) begin
    f_cast2_reg_518[31:4] <= 28'b0000000000000000000000000000;
    tmp_2_reg_530[31:5] <= 27'b000000000000000000000000000;
end

endmodule //data_transfer_i
