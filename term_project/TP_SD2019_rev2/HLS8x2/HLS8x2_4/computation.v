// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module computation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        O_BRAM_0_address0,
        O_BRAM_0_ce0,
        O_BRAM_0_q0,
        O_BRAM_0_address1,
        O_BRAM_0_ce1,
        O_BRAM_0_we1,
        O_BRAM_0_d1,
        O_BRAM_1_address0,
        O_BRAM_1_ce0,
        O_BRAM_1_q0,
        O_BRAM_1_address1,
        O_BRAM_1_ce1,
        O_BRAM_1_we1,
        O_BRAM_1_d1,
        I_BRAM_0_address0,
        I_BRAM_0_ce0,
        I_BRAM_0_q0,
        I_BRAM_1_address0,
        I_BRAM_1_ce0,
        I_BRAM_1_q0,
        I_BRAM_2_address0,
        I_BRAM_2_ce0,
        I_BRAM_2_q0,
        I_BRAM_3_address0,
        I_BRAM_3_ce0,
        I_BRAM_3_q0,
        I_BRAM_4_address0,
        I_BRAM_4_ce0,
        I_BRAM_4_q0,
        I_BRAM_5_address0,
        I_BRAM_5_ce0,
        I_BRAM_5_q0,
        I_BRAM_6_address0,
        I_BRAM_6_ce0,
        I_BRAM_6_q0,
        I_BRAM_7_address0,
        I_BRAM_7_ce0,
        I_BRAM_7_q0,
        W_BRAM_0_0_address0,
        W_BRAM_0_0_ce0,
        W_BRAM_0_0_q0,
        W_BRAM_0_1_address0,
        W_BRAM_0_1_ce0,
        W_BRAM_0_1_q0,
        W_BRAM_0_2_address0,
        W_BRAM_0_2_ce0,
        W_BRAM_0_2_q0,
        W_BRAM_0_3_address0,
        W_BRAM_0_3_ce0,
        W_BRAM_0_3_q0,
        W_BRAM_0_4_address0,
        W_BRAM_0_4_ce0,
        W_BRAM_0_4_q0,
        W_BRAM_0_5_address0,
        W_BRAM_0_5_ce0,
        W_BRAM_0_5_q0,
        W_BRAM_0_6_address0,
        W_BRAM_0_6_ce0,
        W_BRAM_0_6_q0,
        W_BRAM_0_7_address0,
        W_BRAM_0_7_ce0,
        W_BRAM_0_7_q0,
        W_BRAM_1_0_address0,
        W_BRAM_1_0_ce0,
        W_BRAM_1_0_q0,
        W_BRAM_1_1_address0,
        W_BRAM_1_1_ce0,
        W_BRAM_1_1_q0,
        W_BRAM_1_2_address0,
        W_BRAM_1_2_ce0,
        W_BRAM_1_2_q0,
        W_BRAM_1_3_address0,
        W_BRAM_1_3_ce0,
        W_BRAM_1_3_q0,
        W_BRAM_1_4_address0,
        W_BRAM_1_4_ce0,
        W_BRAM_1_4_q0,
        W_BRAM_1_5_address0,
        W_BRAM_1_5_ce0,
        W_BRAM_1_5_q0,
        W_BRAM_1_6_address0,
        W_BRAM_1_6_ce0,
        W_BRAM_1_6_q0,
        W_BRAM_1_7_address0,
        W_BRAM_1_7_ce0,
        W_BRAM_1_7_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] O_BRAM_0_address0;
output   O_BRAM_0_ce0;
input  [15:0] O_BRAM_0_q0;
output  [7:0] O_BRAM_0_address1;
output   O_BRAM_0_ce1;
output   O_BRAM_0_we1;
output  [15:0] O_BRAM_0_d1;
output  [7:0] O_BRAM_1_address0;
output   O_BRAM_1_ce0;
input  [15:0] O_BRAM_1_q0;
output  [7:0] O_BRAM_1_address1;
output   O_BRAM_1_ce1;
output   O_BRAM_1_we1;
output  [15:0] O_BRAM_1_d1;
output  [7:0] I_BRAM_0_address0;
output   I_BRAM_0_ce0;
input  [15:0] I_BRAM_0_q0;
output  [7:0] I_BRAM_1_address0;
output   I_BRAM_1_ce0;
input  [15:0] I_BRAM_1_q0;
output  [7:0] I_BRAM_2_address0;
output   I_BRAM_2_ce0;
input  [15:0] I_BRAM_2_q0;
output  [7:0] I_BRAM_3_address0;
output   I_BRAM_3_ce0;
input  [15:0] I_BRAM_3_q0;
output  [7:0] I_BRAM_4_address0;
output   I_BRAM_4_ce0;
input  [15:0] I_BRAM_4_q0;
output  [7:0] I_BRAM_5_address0;
output   I_BRAM_5_ce0;
input  [15:0] I_BRAM_5_q0;
output  [7:0] I_BRAM_6_address0;
output   I_BRAM_6_ce0;
input  [15:0] I_BRAM_6_q0;
output  [7:0] I_BRAM_7_address0;
output   I_BRAM_7_ce0;
input  [15:0] I_BRAM_7_q0;
output  [3:0] W_BRAM_0_0_address0;
output   W_BRAM_0_0_ce0;
input  [15:0] W_BRAM_0_0_q0;
output  [3:0] W_BRAM_0_1_address0;
output   W_BRAM_0_1_ce0;
input  [15:0] W_BRAM_0_1_q0;
output  [3:0] W_BRAM_0_2_address0;
output   W_BRAM_0_2_ce0;
input  [15:0] W_BRAM_0_2_q0;
output  [3:0] W_BRAM_0_3_address0;
output   W_BRAM_0_3_ce0;
input  [15:0] W_BRAM_0_3_q0;
output  [3:0] W_BRAM_0_4_address0;
output   W_BRAM_0_4_ce0;
input  [15:0] W_BRAM_0_4_q0;
output  [3:0] W_BRAM_0_5_address0;
output   W_BRAM_0_5_ce0;
input  [15:0] W_BRAM_0_5_q0;
output  [3:0] W_BRAM_0_6_address0;
output   W_BRAM_0_6_ce0;
input  [15:0] W_BRAM_0_6_q0;
output  [3:0] W_BRAM_0_7_address0;
output   W_BRAM_0_7_ce0;
input  [15:0] W_BRAM_0_7_q0;
output  [3:0] W_BRAM_1_0_address0;
output   W_BRAM_1_0_ce0;
input  [15:0] W_BRAM_1_0_q0;
output  [3:0] W_BRAM_1_1_address0;
output   W_BRAM_1_1_ce0;
input  [15:0] W_BRAM_1_1_q0;
output  [3:0] W_BRAM_1_2_address0;
output   W_BRAM_1_2_ce0;
input  [15:0] W_BRAM_1_2_q0;
output  [3:0] W_BRAM_1_3_address0;
output   W_BRAM_1_3_ce0;
input  [15:0] W_BRAM_1_3_q0;
output  [3:0] W_BRAM_1_4_address0;
output   W_BRAM_1_4_ce0;
input  [15:0] W_BRAM_1_4_q0;
output  [3:0] W_BRAM_1_5_address0;
output   W_BRAM_1_5_ce0;
input  [15:0] W_BRAM_1_5_q0;
output  [3:0] W_BRAM_1_6_address0;
output   W_BRAM_1_6_ce0;
input  [15:0] W_BRAM_1_6_q0;
output  [3:0] W_BRAM_1_7_address0;
output   W_BRAM_1_7_ce0;
input  [15:0] W_BRAM_1_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg O_BRAM_0_ce0;
reg O_BRAM_0_ce1;
reg O_BRAM_0_we1;
reg O_BRAM_1_ce0;
reg O_BRAM_1_ce1;
reg O_BRAM_1_we1;
reg I_BRAM_0_ce0;
reg I_BRAM_1_ce0;
reg I_BRAM_2_ce0;
reg I_BRAM_3_ce0;
reg I_BRAM_4_ce0;
reg I_BRAM_5_ce0;
reg I_BRAM_6_ce0;
reg I_BRAM_7_ce0;
reg W_BRAM_0_0_ce0;
reg W_BRAM_0_1_ce0;
reg W_BRAM_0_2_ce0;
reg W_BRAM_0_3_ce0;
reg W_BRAM_0_4_ce0;
reg W_BRAM_0_5_ce0;
reg W_BRAM_0_6_ce0;
reg W_BRAM_0_7_ce0;
reg W_BRAM_1_0_ce0;
reg W_BRAM_1_1_ce0;
reg W_BRAM_1_2_ce0;
reg W_BRAM_1_3_ce0;
reg W_BRAM_1_4_ce0;
reg W_BRAM_1_5_ce0;
reg W_BRAM_1_6_ce0;
reg W_BRAM_1_7_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten3_reg_426;
reg   [9:0] indvar_flatten4_reg_437;
reg   [7:0] indvar_flatten_reg_448;
reg   [1:0] r_reg_459;
reg   [1:0] s_reg_470;
reg   [3:0] te_reg_481;
reg   [3:0] tf_reg_492;
wire   [0:0] exitcond_flatten4_fu_503_p2;
reg   [0:0] exitcond_flatten4_reg_1013;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten4_reg_1013;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten4_reg_1013;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten4_reg_1013;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten4_reg_1013;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten4_reg_1013;
wire   [10:0] indvar_flatten_next4_fu_509_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten_fu_515_p2;
reg   [0:0] exitcond_flatten_reg_1022;
wire   [0:0] not_exitcond_flatten_fu_521_p2;
reg   [0:0] not_exitcond_flatten_reg_1033;
wire   [0:0] exitcond_flatten1_fu_527_p2;
reg   [0:0] exitcond_flatten1_reg_1038;
wire   [0:0] exitcond_flatten_mid_fu_533_p2;
reg   [0:0] exitcond_flatten_mid_reg_1043;
wire   [0:0] tmp_13_fu_539_p2;
reg   [0:0] tmp_13_reg_1051;
wire   [7:0] indvar_flatten_next_fu_551_p3;
wire   [9:0] indvar_flatten_next3_fu_565_p3;
wire   [1:0] r_cast1_mid2_fu_632_p3;
reg   [1:0] r_cast1_mid2_reg_1066;
reg    ap_enable_reg_pp0_iter1;
wire   [1:0] s_cast_mid2_fu_710_p3;
reg   [1:0] s_cast_mid2_reg_1071;
wire   [4:0] tmp_4_mid2_v_v_fu_727_p3;
reg   [4:0] tmp_4_mid2_v_v_reg_1077;
reg   [4:0] ap_reg_pp0_iter2_tmp_4_mid2_v_v_reg_1077;
wire   [3:0] tf_mid2_fu_773_p3;
reg   [3:0] tf_mid2_reg_1082;
reg   [3:0] ap_reg_pp0_iter2_tf_mid2_reg_1082;
reg   [3:0] ap_reg_pp0_iter3_tf_mid2_reg_1082;
wire   [3:0] tmp_6_mid2_fu_787_p3;
reg   [3:0] tmp_6_mid2_reg_1088;
wire   [3:0] tmp_7_mid2_fu_795_p3;
reg   [3:0] tmp_7_mid2_reg_1094;
reg   [3:0] ap_reg_pp0_iter2_tmp_7_mid2_reg_1094;
reg   [3:0] ap_reg_pp0_iter3_tmp_7_mid2_reg_1094;
wire   [3:0] tf_1_fu_803_p2;
wire   [63:0] tmp_33_cast_fu_847_p1;
reg   [63:0] tmp_33_cast_reg_1105;
wire   [63:0] tmp_4_mid2_fu_857_p1;
reg   [63:0] tmp_4_mid2_reg_1129;
reg  signed [15:0] I_BRAM_2_load_reg_1172;
reg  signed [15:0] I_BRAM_4_load_reg_1183;
reg  signed [15:0] I_BRAM_7_load_reg_1199;
reg   [7:0] O_BRAM_0_addr_reg_1240;
reg   [7:0] ap_reg_pp0_iter5_O_BRAM_0_addr_reg_1240;
reg   [7:0] O_BRAM_1_addr_reg_1246;
reg   [7:0] ap_reg_pp0_iter5_O_BRAM_1_addr_reg_1246;
reg  signed [15:0] I_BRAM_0_load_reg_1252;
reg  signed [15:0] W_BRAM_0_0_load_reg_1258;
reg  signed [15:0] I_BRAM_1_load_reg_1263;
reg  signed [15:0] W_BRAM_0_1_load_reg_1269;
wire  signed [15:0] tmp_52_0_2_fu_921_p2;
reg  signed [15:0] tmp_52_0_2_reg_1274;
reg  signed [15:0] I_BRAM_3_load_reg_1279;
wire  signed [15:0] tmp_52_0_4_fu_926_p2;
reg  signed [15:0] tmp_52_0_4_reg_1290;
reg  signed [15:0] I_BRAM_5_load_reg_1295;
reg  signed [15:0] I_BRAM_6_load_reg_1306;
reg  signed [15:0] W_BRAM_0_6_load_reg_1312;
wire  signed [15:0] tmp_52_0_7_fu_931_p2;
reg  signed [15:0] tmp_52_0_7_reg_1317;
reg  signed [15:0] W_BRAM_1_0_load_reg_1322;
reg  signed [15:0] W_BRAM_1_1_load_reg_1327;
wire  signed [15:0] tmp_52_1_2_fu_936_p2;
reg  signed [15:0] tmp_52_1_2_reg_1332;
wire  signed [15:0] tmp_52_1_4_fu_941_p2;
reg  signed [15:0] tmp_52_1_4_reg_1342;
reg  signed [15:0] W_BRAM_1_6_load_reg_1352;
wire  signed [15:0] tmp_52_1_7_fu_946_p2;
reg  signed [15:0] tmp_52_1_7_reg_1357;
(* use_dsp48 = "no" *) wire   [15:0] tmp1_fu_884_p2;
reg   [15:0] tmp1_reg_1362;
wire  signed [15:0] grp_fu_964_p3;
reg  signed [15:0] tmp5_reg_1367;
reg    ap_enable_reg_pp0_iter5;
wire  signed [15:0] grp_fu_970_p3;
reg  signed [15:0] tmp6_reg_1372;
(* use_dsp48 = "no" *) wire   [15:0] tmp8_fu_888_p2;
reg   [15:0] tmp8_reg_1377;
wire  signed [15:0] grp_fu_995_p3;
reg  signed [15:0] tmp12_reg_1382;
wire  signed [15:0] grp_fu_1001_p3;
reg  signed [15:0] tmp13_reg_1387;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg   [1:0] ap_phi_mux_r_phi_fu_463_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_s_phi_fu_474_p4;
reg   [3:0] ap_phi_mux_te_phi_fu_485_p4;
wire   [63:0] tmp_34_cast_fu_879_p1;
wire   [7:0] indvar_flatten_op_fu_545_p2;
wire   [9:0] indvar_flatten33_op_fu_559_p2;
wire   [3:0] p_shl_fu_581_p3;
wire   [4:0] p_shl_cast_fu_589_p1;
wire   [4:0] r_cast_fu_573_p1;
wire   [4:0] tmp_fu_593_p2;
wire   [4:0] s_cast1_fu_599_p1;
wire   [3:0] r_cast1_fu_577_p1;
wire   [1:0] r_1_fu_615_p2;
wire   [3:0] p_shl_mid1_fu_643_p3;
wire   [4:0] p_shl_cast_mid1_fu_651_p1;
wire   [4:0] r_cast_mid1_fu_628_p1;
wire   [4:0] tmp_mid1_fu_655_p2;
wire   [4:0] tmp_s_fu_603_p2;
wire   [3:0] tmp_6_mid_cast_fu_675_p1;
wire   [3:0] tmp_5_fu_609_p2;
wire   [0:0] exitcond_fu_686_p2;
wire   [1:0] s_mid_fu_621_p3;
wire   [1:0] s_1_fu_697_p2;
wire   [4:0] s_cast1_mid1_fu_717_p1;
wire   [4:0] tmp_mid2_fu_661_p3;
wire   [4:0] tmp_mid1_3_fu_721_p2;
wire   [4:0] tmp_4_mid254_v_v_fu_668_p3;
wire   [3:0] r_cast1_mid2_cast_fu_639_p1;
wire   [3:0] tmp_6_mid3_fu_679_p3;
wire   [0:0] exitcond_flatten_not_fu_741_p2;
wire   [0:0] exitcond3_mid_fu_692_p2;
wire   [0:0] not_exitcond_flatten_1_fu_746_p2;
wire   [3:0] te_mid_fu_703_p3;
wire   [0:0] exitcond3_mid1_fu_751_p2;
wire   [0:0] tmp_14_fu_763_p2;
wire   [0:0] tmp_35_fu_768_p2;
wire   [3:0] te_1_fu_757_p2;
wire   [3:0] tmp_5_mid1_fu_781_p2;
wire   [3:0] tmp_6_mid5_fu_734_p3;
wire   [7:0] tmp_36_fu_815_p3;
wire   [8:0] p_shl2_cast_fu_822_p1;
wire   [8:0] tmp_6_mid2_cast_fu_812_p1;
wire   [3:0] s_cast_mid2_cast_fu_809_p1;
wire   [3:0] tmp_8_fu_832_p2;
wire   [8:0] tmp_15_fu_826_p2;
wire   [8:0] tmp_9_cast_fu_837_p1;
wire   [8:0] tmp_17_fu_841_p2;
wire  signed [31:0] tmp_4_mid2_v_fu_854_p1;
wire   [7:0] grp_fu_912_p3;
wire  signed [15:0] grp_fu_951_p3;
wire  signed [15:0] grp_fu_958_p3;
wire  signed [15:0] grp_fu_982_p3;
wire  signed [15:0] grp_fu_989_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp4_fu_892_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp11_fu_902_p2;
wire   [3:0] grp_fu_912_p0;
wire   [4:0] grp_fu_912_p1;
wire   [3:0] grp_fu_912_p2;
wire  signed [15:0] grp_fu_976_p3;
wire  signed [15:0] grp_fu_1007_p3;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_912_p00;
wire   [7:0] grp_fu_912_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

HLS8x2_4_mac_mulabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
HLS8x2_4_mac_mulabkb_U31(
    .din0(grp_fu_912_p0),
    .din1(grp_fu_912_p1),
    .din2(grp_fu_912_p2),
    .dout(grp_fu_912_p3)
);

HLS8x2_4_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mul_mul_cud_U32(
    .din0(W_BRAM_0_2_q0),
    .din1(I_BRAM_2_load_reg_1172),
    .dout(tmp_52_0_2_fu_921_p2)
);

HLS8x2_4_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mul_mul_cud_U33(
    .din0(W_BRAM_0_4_q0),
    .din1(I_BRAM_4_load_reg_1183),
    .dout(tmp_52_0_4_fu_926_p2)
);

HLS8x2_4_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mul_mul_cud_U34(
    .din0(W_BRAM_0_7_q0),
    .din1(I_BRAM_7_load_reg_1199),
    .dout(tmp_52_0_7_fu_931_p2)
);

HLS8x2_4_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mul_mul_cud_U35(
    .din0(W_BRAM_1_2_q0),
    .din1(I_BRAM_2_load_reg_1172),
    .dout(tmp_52_1_2_fu_936_p2)
);

HLS8x2_4_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mul_mul_cud_U36(
    .din0(W_BRAM_1_4_q0),
    .din1(I_BRAM_4_load_reg_1183),
    .dout(tmp_52_1_4_fu_941_p2)
);

HLS8x2_4_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mul_mul_cud_U37(
    .din0(W_BRAM_1_7_q0),
    .din1(I_BRAM_7_load_reg_1199),
    .dout(tmp_52_1_7_fu_946_p2)
);

HLS8x2_4_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_muladEe_U38(
    .din0(W_BRAM_0_0_load_reg_1258),
    .din1(I_BRAM_0_load_reg_1252),
    .din2(O_BRAM_0_q0),
    .dout(grp_fu_951_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U39(
    .din0(W_BRAM_0_1_load_reg_1269),
    .din1(I_BRAM_1_load_reg_1263),
    .din2(tmp_52_0_2_reg_1274),
    .dout(grp_fu_958_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U40(
    .din0(W_BRAM_0_3_q0),
    .din1(I_BRAM_3_load_reg_1279),
    .din2(tmp_52_0_4_reg_1290),
    .dout(grp_fu_964_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U41(
    .din0(W_BRAM_0_5_q0),
    .din1(I_BRAM_5_load_reg_1295),
    .din2(grp_fu_976_p3),
    .dout(grp_fu_970_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U42(
    .din0(W_BRAM_0_6_load_reg_1312),
    .din1(I_BRAM_6_load_reg_1306),
    .din2(tmp_52_0_7_reg_1317),
    .dout(grp_fu_976_p3)
);

HLS8x2_4_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_muladEe_U43(
    .din0(W_BRAM_1_0_load_reg_1322),
    .din1(I_BRAM_0_load_reg_1252),
    .din2(O_BRAM_1_q0),
    .dout(grp_fu_982_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U44(
    .din0(W_BRAM_1_1_load_reg_1327),
    .din1(I_BRAM_1_load_reg_1263),
    .din2(tmp_52_1_2_reg_1332),
    .dout(grp_fu_989_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U45(
    .din0(W_BRAM_1_3_q0),
    .din1(I_BRAM_3_load_reg_1279),
    .din2(tmp_52_1_4_reg_1342),
    .dout(grp_fu_995_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U46(
    .din0(W_BRAM_1_5_q0),
    .din1(I_BRAM_5_load_reg_1295),
    .din2(grp_fu_1007_p3),
    .dout(grp_fu_1001_p3)
);

HLS8x2_4_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_4_mac_mulaeOg_U47(
    .din0(W_BRAM_1_6_load_reg_1352),
    .din1(I_BRAM_6_load_reg_1306),
    .din2(tmp_52_1_7_reg_1357),
    .dout(grp_fu_1007_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten4_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten3_reg_426 <= indvar_flatten_next4_fu_509_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_426 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten4_reg_437 <= indvar_flatten_next3_fu_565_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten4_reg_437 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_448 <= indvar_flatten_next_fu_551_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_448 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_reg_459 <= r_cast1_mid2_reg_1066;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_459 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_reg_470 <= s_cast_mid2_reg_1071;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_reg_470 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        te_reg_481 <= tmp_7_mid2_reg_1094;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        te_reg_481 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1013 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tf_reg_492 <= tf_1_fu_803_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tf_reg_492 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_0_load_reg_1252 <= I_BRAM_0_q0;
        I_BRAM_1_load_reg_1263 <= I_BRAM_1_q0;
        I_BRAM_3_load_reg_1279 <= I_BRAM_3_q0;
        I_BRAM_5_load_reg_1295 <= I_BRAM_5_q0;
        I_BRAM_6_load_reg_1306 <= I_BRAM_6_q0;
        O_BRAM_0_addr_reg_1240 <= tmp_34_cast_fu_879_p1;
        O_BRAM_1_addr_reg_1246 <= tmp_34_cast_fu_879_p1;
        W_BRAM_0_0_load_reg_1258 <= W_BRAM_0_0_q0;
        W_BRAM_0_1_load_reg_1269 <= W_BRAM_0_1_q0;
        W_BRAM_0_6_load_reg_1312 <= W_BRAM_0_6_q0;
        W_BRAM_1_0_load_reg_1322 <= W_BRAM_1_0_q0;
        W_BRAM_1_1_load_reg_1327 <= W_BRAM_1_1_q0;
        W_BRAM_1_6_load_reg_1352 <= W_BRAM_1_6_q0;
        tmp_52_0_2_reg_1274 <= tmp_52_0_2_fu_921_p2;
        tmp_52_0_4_reg_1290 <= tmp_52_0_4_fu_926_p2;
        tmp_52_0_7_reg_1317 <= tmp_52_0_7_fu_931_p2;
        tmp_52_1_2_reg_1332 <= tmp_52_1_2_fu_936_p2;
        tmp_52_1_4_reg_1342 <= tmp_52_1_4_fu_941_p2;
        tmp_52_1_7_reg_1357 <= tmp_52_1_7_fu_946_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_2_load_reg_1172 <= I_BRAM_2_q0;
        I_BRAM_4_load_reg_1183 <= I_BRAM_4_q0;
        I_BRAM_7_load_reg_1199 <= I_BRAM_7_q0;
        tmp_4_mid2_reg_1129[31 : 0] <= tmp_4_mid2_fu_857_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 <= exitcond_flatten4_reg_1013;
        exitcond_flatten4_reg_1013 <= exitcond_flatten4_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_flatten4_reg_1013 <= ap_reg_pp0_iter1_exitcond_flatten4_reg_1013;
        ap_reg_pp0_iter2_tf_mid2_reg_1082 <= tf_mid2_reg_1082;
        ap_reg_pp0_iter2_tmp_4_mid2_v_v_reg_1077 <= tmp_4_mid2_v_v_reg_1077;
        ap_reg_pp0_iter2_tmp_7_mid2_reg_1094 <= tmp_7_mid2_reg_1094;
        ap_reg_pp0_iter3_exitcond_flatten4_reg_1013 <= ap_reg_pp0_iter2_exitcond_flatten4_reg_1013;
        ap_reg_pp0_iter3_tf_mid2_reg_1082 <= ap_reg_pp0_iter2_tf_mid2_reg_1082;
        ap_reg_pp0_iter3_tmp_7_mid2_reg_1094 <= ap_reg_pp0_iter2_tmp_7_mid2_reg_1094;
        ap_reg_pp0_iter4_exitcond_flatten4_reg_1013 <= ap_reg_pp0_iter3_exitcond_flatten4_reg_1013;
        ap_reg_pp0_iter5_O_BRAM_0_addr_reg_1240 <= O_BRAM_0_addr_reg_1240;
        ap_reg_pp0_iter5_O_BRAM_1_addr_reg_1246 <= O_BRAM_1_addr_reg_1246;
        ap_reg_pp0_iter5_exitcond_flatten4_reg_1013 <= ap_reg_pp0_iter4_exitcond_flatten4_reg_1013;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_503_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_1038 <= exitcond_flatten1_fu_527_p2;
        exitcond_flatten_mid_reg_1043 <= exitcond_flatten_mid_fu_533_p2;
        exitcond_flatten_reg_1022 <= exitcond_flatten_fu_515_p2;
        not_exitcond_flatten_reg_1033 <= not_exitcond_flatten_fu_521_p2;
        tmp_13_reg_1051 <= tmp_13_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1013 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_cast1_mid2_reg_1066 <= r_cast1_mid2_fu_632_p3;
        s_cast_mid2_reg_1071 <= s_cast_mid2_fu_710_p3;
        tmp_7_mid2_reg_1094 <= tmp_7_mid2_fu_795_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1013 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tf_mid2_reg_1082 <= tf_mid2_fu_773_p3;
        tmp_4_mid2_v_v_reg_1077 <= tmp_4_mid2_v_v_fu_727_p3;
        tmp_6_mid2_reg_1088 <= tmp_6_mid2_fu_787_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter4_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        tmp12_reg_1382 <= grp_fu_995_p3;
        tmp13_reg_1387 <= grp_fu_1001_p3;
        tmp5_reg_1367 <= grp_fu_964_p3;
        tmp6_reg_1372 <= grp_fu_970_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter4_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp1_reg_1362 <= tmp1_fu_884_p2;
        tmp8_reg_1377 <= tmp8_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_33_cast_reg_1105[8 : 0] <= tmp_33_cast_fu_847_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_0_ce0 = 1'b1;
    end else begin
        I_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_1_ce0 = 1'b1;
    end else begin
        I_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_2_ce0 = 1'b1;
    end else begin
        I_BRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_3_ce0 = 1'b1;
    end else begin
        I_BRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_4_ce0 = 1'b1;
    end else begin
        I_BRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_5_ce0 = 1'b1;
    end else begin
        I_BRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_6_ce0 = 1'b1;
    end else begin
        I_BRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_7_ce0 = 1'b1;
    end else begin
        I_BRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        O_BRAM_0_ce0 = 1'b1;
    end else begin
        O_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_0_ce1 = 1'b1;
    end else begin
        O_BRAM_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_0_we1 = 1'b1;
    end else begin
        O_BRAM_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        O_BRAM_1_ce0 = 1'b1;
    end else begin
        O_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_1_ce1 = 1'b1;
    end else begin
        O_BRAM_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1013 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_1_we1 = 1'b1;
    end else begin
        O_BRAM_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_0_ce0 = 1'b1;
    end else begin
        W_BRAM_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_1_ce0 = 1'b1;
    end else begin
        W_BRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_2_ce0 = 1'b1;
    end else begin
        W_BRAM_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_0_3_ce0 = 1'b1;
    end else begin
        W_BRAM_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_4_ce0 = 1'b1;
    end else begin
        W_BRAM_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_0_5_ce0 = 1'b1;
    end else begin
        W_BRAM_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_6_ce0 = 1'b1;
    end else begin
        W_BRAM_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_7_ce0 = 1'b1;
    end else begin
        W_BRAM_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_0_ce0 = 1'b1;
    end else begin
        W_BRAM_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_1_ce0 = 1'b1;
    end else begin
        W_BRAM_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_2_ce0 = 1'b1;
    end else begin
        W_BRAM_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_1_3_ce0 = 1'b1;
    end else begin
        W_BRAM_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_4_ce0 = 1'b1;
    end else begin
        W_BRAM_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_1_5_ce0 = 1'b1;
    end else begin
        W_BRAM_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_6_ce0 = 1'b1;
    end else begin
        W_BRAM_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_7_ce0 = 1'b1;
    end else begin
        W_BRAM_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_r_phi_fu_463_p4 = r_cast1_mid2_reg_1066;
    end else begin
        ap_phi_mux_r_phi_fu_463_p4 = r_reg_459;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_s_phi_fu_474_p4 = s_cast_mid2_reg_1071;
    end else begin
        ap_phi_mux_s_phi_fu_474_p4 = s_reg_470;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1013 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_te_phi_fu_485_p4 = tmp_7_mid2_reg_1094;
    end else begin
        ap_phi_mux_te_phi_fu_485_p4 = te_reg_481;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_BRAM_0_address0 = tmp_33_cast_reg_1105;

assign I_BRAM_1_address0 = tmp_33_cast_reg_1105;

assign I_BRAM_2_address0 = tmp_33_cast_fu_847_p1;

assign I_BRAM_3_address0 = tmp_33_cast_reg_1105;

assign I_BRAM_4_address0 = tmp_33_cast_fu_847_p1;

assign I_BRAM_5_address0 = tmp_33_cast_reg_1105;

assign I_BRAM_6_address0 = tmp_33_cast_reg_1105;

assign I_BRAM_7_address0 = tmp_33_cast_fu_847_p1;

assign O_BRAM_0_address0 = tmp_34_cast_fu_879_p1;

assign O_BRAM_0_address1 = ap_reg_pp0_iter5_O_BRAM_0_addr_reg_1240;

assign O_BRAM_0_d1 = (tmp1_reg_1362 + tmp4_fu_892_p2);

assign O_BRAM_1_address0 = tmp_34_cast_fu_879_p1;

assign O_BRAM_1_address1 = ap_reg_pp0_iter5_O_BRAM_1_addr_reg_1246;

assign O_BRAM_1_d1 = (tmp8_reg_1377 + tmp11_fu_902_p2);

assign W_BRAM_0_0_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_0_1_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_0_2_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_0_3_address0 = tmp_4_mid2_reg_1129;

assign W_BRAM_0_4_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_0_5_address0 = tmp_4_mid2_reg_1129;

assign W_BRAM_0_6_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_0_7_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_1_0_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_1_1_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_1_2_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_1_3_address0 = tmp_4_mid2_reg_1129;

assign W_BRAM_1_4_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_1_5_address0 = tmp_4_mid2_reg_1129;

assign W_BRAM_1_6_address0 = tmp_4_mid2_fu_857_p1;

assign W_BRAM_1_7_address0 = tmp_4_mid2_fu_857_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond3_mid1_fu_751_p2 = (not_exitcond_flatten_1_fu_746_p2 & exitcond3_mid_fu_692_p2);

assign exitcond3_mid_fu_692_p2 = (not_exitcond_flatten_reg_1033 & exitcond_fu_686_p2);

assign exitcond_flatten1_fu_527_p2 = ((indvar_flatten_reg_448 == 8'd169) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_503_p2 = ((indvar_flatten3_reg_426 == 11'd1521) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_515_p2 = ((indvar_flatten4_reg_437 == 10'd507) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_533_p2 = (not_exitcond_flatten_fu_521_p2 & exitcond_flatten1_fu_527_p2);

assign exitcond_flatten_not_fu_741_p2 = (exitcond_flatten1_reg_1038 ^ 1'd1);

assign exitcond_fu_686_p2 = ((tf_reg_492 == 4'd13) ? 1'b1 : 1'b0);

assign grp_fu_912_p0 = grp_fu_912_p00;

assign grp_fu_912_p00 = ap_reg_pp0_iter3_tmp_7_mid2_reg_1094;

assign grp_fu_912_p1 = 8'd13;

assign grp_fu_912_p2 = grp_fu_912_p20;

assign grp_fu_912_p20 = ap_reg_pp0_iter3_tf_mid2_reg_1082;

assign indvar_flatten33_op_fu_559_p2 = (indvar_flatten4_reg_437 + 10'd1);

assign indvar_flatten_next3_fu_565_p3 = ((exitcond_flatten_fu_515_p2[0:0] === 1'b1) ? 10'd1 : indvar_flatten33_op_fu_559_p2);

assign indvar_flatten_next4_fu_509_p2 = (indvar_flatten3_reg_426 + 11'd1);

assign indvar_flatten_next_fu_551_p3 = ((tmp_13_fu_539_p2[0:0] === 1'b1) ? 8'd1 : indvar_flatten_op_fu_545_p2);

assign indvar_flatten_op_fu_545_p2 = (indvar_flatten_reg_448 + 8'd1);

assign not_exitcond_flatten_1_fu_746_p2 = (exitcond_flatten_reg_1022 | exitcond_flatten_not_fu_741_p2);

assign not_exitcond_flatten_fu_521_p2 = (exitcond_flatten_fu_515_p2 ^ 1'd1);

assign p_shl2_cast_fu_822_p1 = tmp_36_fu_815_p3;

assign p_shl_cast_fu_589_p1 = p_shl_fu_581_p3;

assign p_shl_cast_mid1_fu_651_p1 = p_shl_mid1_fu_643_p3;

assign p_shl_fu_581_p3 = {{ap_phi_mux_r_phi_fu_463_p4}, {2'd0}};

assign p_shl_mid1_fu_643_p3 = {{r_1_fu_615_p2}, {2'd0}};

assign r_1_fu_615_p2 = (ap_phi_mux_r_phi_fu_463_p4 + 2'd1);

assign r_cast1_fu_577_p1 = ap_phi_mux_r_phi_fu_463_p4;

assign r_cast1_mid2_cast_fu_639_p1 = r_cast1_mid2_fu_632_p3;

assign r_cast1_mid2_fu_632_p3 = ((exitcond_flatten_reg_1022[0:0] === 1'b1) ? r_1_fu_615_p2 : ap_phi_mux_r_phi_fu_463_p4);

assign r_cast_fu_573_p1 = ap_phi_mux_r_phi_fu_463_p4;

assign r_cast_mid1_fu_628_p1 = r_1_fu_615_p2;

assign s_1_fu_697_p2 = (s_mid_fu_621_p3 + 2'd1);

assign s_cast1_fu_599_p1 = ap_phi_mux_s_phi_fu_474_p4;

assign s_cast1_mid1_fu_717_p1 = s_1_fu_697_p2;

assign s_cast_mid2_cast_fu_809_p1 = s_cast_mid2_reg_1071;

assign s_cast_mid2_fu_710_p3 = ((exitcond_flatten_mid_reg_1043[0:0] === 1'b1) ? s_1_fu_697_p2 : s_mid_fu_621_p3);

assign s_mid_fu_621_p3 = ((exitcond_flatten_reg_1022[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_s_phi_fu_474_p4);

assign te_1_fu_757_p2 = (te_mid_fu_703_p3 + 4'd1);

assign te_mid_fu_703_p3 = ((tmp_13_reg_1051[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_te_phi_fu_485_p4);

assign tf_1_fu_803_p2 = (tf_mid2_fu_773_p3 + 4'd1);

assign tf_mid2_fu_773_p3 = ((tmp_35_fu_768_p2[0:0] === 1'b1) ? 4'd0 : tf_reg_492);

assign tmp11_fu_902_p2 = ($signed(tmp12_reg_1382) + $signed(tmp13_reg_1387));

assign tmp1_fu_884_p2 = ($signed(grp_fu_951_p3) + $signed(grp_fu_958_p3));

assign tmp4_fu_892_p2 = ($signed(tmp5_reg_1367) + $signed(tmp6_reg_1372));

assign tmp8_fu_888_p2 = ($signed(grp_fu_982_p3) + $signed(grp_fu_989_p3));

assign tmp_13_fu_539_p2 = (exitcond_flatten_mid_fu_533_p2 | exitcond_flatten_fu_515_p2);

assign tmp_14_fu_763_p2 = (exitcond_flatten_mid_reg_1043 | exitcond3_mid1_fu_751_p2);

assign tmp_15_fu_826_p2 = (p_shl2_cast_fu_822_p1 - tmp_6_mid2_cast_fu_812_p1);

assign tmp_17_fu_841_p2 = (tmp_15_fu_826_p2 + tmp_9_cast_fu_837_p1);

assign tmp_33_cast_fu_847_p1 = tmp_17_fu_841_p2;

assign tmp_34_cast_fu_879_p1 = grp_fu_912_p3;

assign tmp_35_fu_768_p2 = (tmp_14_fu_763_p2 | exitcond_flatten_reg_1022);

assign tmp_36_fu_815_p3 = {{tmp_6_mid2_reg_1088}, {4'd0}};

assign tmp_4_mid254_v_v_fu_668_p3 = ((exitcond_flatten_reg_1022[0:0] === 1'b1) ? tmp_mid1_fu_655_p2 : tmp_s_fu_603_p2);

assign tmp_4_mid2_fu_857_p1 = $unsigned(tmp_4_mid2_v_fu_854_p1);

assign tmp_4_mid2_v_fu_854_p1 = $signed(ap_reg_pp0_iter2_tmp_4_mid2_v_v_reg_1077);

assign tmp_4_mid2_v_v_fu_727_p3 = ((exitcond_flatten_mid_reg_1043[0:0] === 1'b1) ? tmp_mid1_3_fu_721_p2 : tmp_4_mid254_v_v_fu_668_p3);

assign tmp_5_fu_609_p2 = (r_cast1_fu_577_p1 + ap_phi_mux_te_phi_fu_485_p4);

assign tmp_5_mid1_fu_781_p2 = (te_1_fu_757_p2 + r_cast1_mid2_cast_fu_639_p1);

assign tmp_6_mid2_cast_fu_812_p1 = tmp_6_mid2_reg_1088;

assign tmp_6_mid2_fu_787_p3 = ((exitcond3_mid1_fu_751_p2[0:0] === 1'b1) ? tmp_5_mid1_fu_781_p2 : tmp_6_mid5_fu_734_p3);

assign tmp_6_mid3_fu_679_p3 = ((exitcond_flatten_reg_1022[0:0] === 1'b1) ? tmp_6_mid_cast_fu_675_p1 : tmp_5_fu_609_p2);

assign tmp_6_mid5_fu_734_p3 = ((exitcond_flatten_mid_reg_1043[0:0] === 1'b1) ? r_cast1_mid2_cast_fu_639_p1 : tmp_6_mid3_fu_679_p3);

assign tmp_6_mid_cast_fu_675_p1 = r_1_fu_615_p2;

assign tmp_7_mid2_fu_795_p3 = ((exitcond3_mid1_fu_751_p2[0:0] === 1'b1) ? te_1_fu_757_p2 : te_mid_fu_703_p3);

assign tmp_8_fu_832_p2 = (tf_mid2_reg_1082 + s_cast_mid2_cast_fu_809_p1);

assign tmp_9_cast_fu_837_p1 = tmp_8_fu_832_p2;

assign tmp_fu_593_p2 = (p_shl_cast_fu_589_p1 - r_cast_fu_573_p1);

assign tmp_mid1_3_fu_721_p2 = (s_cast1_mid1_fu_717_p1 + tmp_mid2_fu_661_p3);

assign tmp_mid1_fu_655_p2 = (p_shl_cast_mid1_fu_651_p1 - r_cast_mid1_fu_628_p1);

assign tmp_mid2_fu_661_p3 = ((exitcond_flatten_reg_1022[0:0] === 1'b1) ? tmp_mid1_fu_655_p2 : tmp_fu_593_p2);

assign tmp_s_fu_603_p2 = (tmp_fu_593_p2 + s_cast1_fu_599_p1);

always @ (posedge ap_clk) begin
    tmp_33_cast_reg_1105[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    tmp_4_mid2_reg_1129[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //computation
