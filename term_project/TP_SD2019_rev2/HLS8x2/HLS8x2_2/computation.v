// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module computation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        O_BRAM_0_address0,
        O_BRAM_0_ce0,
        O_BRAM_0_q0,
        O_BRAM_0_address1,
        O_BRAM_0_ce1,
        O_BRAM_0_we1,
        O_BRAM_0_d1,
        O_BRAM_1_address0,
        O_BRAM_1_ce0,
        O_BRAM_1_q0,
        O_BRAM_1_address1,
        O_BRAM_1_ce1,
        O_BRAM_1_we1,
        O_BRAM_1_d1,
        I_BRAM_0_address0,
        I_BRAM_0_ce0,
        I_BRAM_0_q0,
        I_BRAM_1_address0,
        I_BRAM_1_ce0,
        I_BRAM_1_q0,
        I_BRAM_2_address0,
        I_BRAM_2_ce0,
        I_BRAM_2_q0,
        I_BRAM_3_address0,
        I_BRAM_3_ce0,
        I_BRAM_3_q0,
        I_BRAM_4_address0,
        I_BRAM_4_ce0,
        I_BRAM_4_q0,
        I_BRAM_5_address0,
        I_BRAM_5_ce0,
        I_BRAM_5_q0,
        I_BRAM_6_address0,
        I_BRAM_6_ce0,
        I_BRAM_6_q0,
        I_BRAM_7_address0,
        I_BRAM_7_ce0,
        I_BRAM_7_q0,
        W_BRAM_0_0_address0,
        W_BRAM_0_0_ce0,
        W_BRAM_0_0_q0,
        W_BRAM_0_1_address0,
        W_BRAM_0_1_ce0,
        W_BRAM_0_1_q0,
        W_BRAM_0_2_address0,
        W_BRAM_0_2_ce0,
        W_BRAM_0_2_q0,
        W_BRAM_0_3_address0,
        W_BRAM_0_3_ce0,
        W_BRAM_0_3_q0,
        W_BRAM_0_4_address0,
        W_BRAM_0_4_ce0,
        W_BRAM_0_4_q0,
        W_BRAM_0_5_address0,
        W_BRAM_0_5_ce0,
        W_BRAM_0_5_q0,
        W_BRAM_0_6_address0,
        W_BRAM_0_6_ce0,
        W_BRAM_0_6_q0,
        W_BRAM_0_7_address0,
        W_BRAM_0_7_ce0,
        W_BRAM_0_7_q0,
        W_BRAM_1_0_address0,
        W_BRAM_1_0_ce0,
        W_BRAM_1_0_q0,
        W_BRAM_1_1_address0,
        W_BRAM_1_1_ce0,
        W_BRAM_1_1_q0,
        W_BRAM_1_2_address0,
        W_BRAM_1_2_ce0,
        W_BRAM_1_2_q0,
        W_BRAM_1_3_address0,
        W_BRAM_1_3_ce0,
        W_BRAM_1_3_q0,
        W_BRAM_1_4_address0,
        W_BRAM_1_4_ce0,
        W_BRAM_1_4_q0,
        W_BRAM_1_5_address0,
        W_BRAM_1_5_ce0,
        W_BRAM_1_5_q0,
        W_BRAM_1_6_address0,
        W_BRAM_1_6_ce0,
        W_BRAM_1_6_q0,
        W_BRAM_1_7_address0,
        W_BRAM_1_7_ce0,
        W_BRAM_1_7_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] O_BRAM_0_address0;
output   O_BRAM_0_ce0;
input  [15:0] O_BRAM_0_q0;
output  [9:0] O_BRAM_0_address1;
output   O_BRAM_0_ce1;
output   O_BRAM_0_we1;
output  [15:0] O_BRAM_0_d1;
output  [9:0] O_BRAM_1_address0;
output   O_BRAM_1_ce0;
input  [15:0] O_BRAM_1_q0;
output  [9:0] O_BRAM_1_address1;
output   O_BRAM_1_ce1;
output   O_BRAM_1_we1;
output  [15:0] O_BRAM_1_d1;
output  [9:0] I_BRAM_0_address0;
output   I_BRAM_0_ce0;
input  [15:0] I_BRAM_0_q0;
output  [9:0] I_BRAM_1_address0;
output   I_BRAM_1_ce0;
input  [15:0] I_BRAM_1_q0;
output  [9:0] I_BRAM_2_address0;
output   I_BRAM_2_ce0;
input  [15:0] I_BRAM_2_q0;
output  [9:0] I_BRAM_3_address0;
output   I_BRAM_3_ce0;
input  [15:0] I_BRAM_3_q0;
output  [9:0] I_BRAM_4_address0;
output   I_BRAM_4_ce0;
input  [15:0] I_BRAM_4_q0;
output  [9:0] I_BRAM_5_address0;
output   I_BRAM_5_ce0;
input  [15:0] I_BRAM_5_q0;
output  [9:0] I_BRAM_6_address0;
output   I_BRAM_6_ce0;
input  [15:0] I_BRAM_6_q0;
output  [9:0] I_BRAM_7_address0;
output   I_BRAM_7_ce0;
input  [15:0] I_BRAM_7_q0;
output  [4:0] W_BRAM_0_0_address0;
output   W_BRAM_0_0_ce0;
input  [15:0] W_BRAM_0_0_q0;
output  [4:0] W_BRAM_0_1_address0;
output   W_BRAM_0_1_ce0;
input  [15:0] W_BRAM_0_1_q0;
output  [4:0] W_BRAM_0_2_address0;
output   W_BRAM_0_2_ce0;
input  [15:0] W_BRAM_0_2_q0;
output  [4:0] W_BRAM_0_3_address0;
output   W_BRAM_0_3_ce0;
input  [15:0] W_BRAM_0_3_q0;
output  [4:0] W_BRAM_0_4_address0;
output   W_BRAM_0_4_ce0;
input  [15:0] W_BRAM_0_4_q0;
output  [4:0] W_BRAM_0_5_address0;
output   W_BRAM_0_5_ce0;
input  [15:0] W_BRAM_0_5_q0;
output  [4:0] W_BRAM_0_6_address0;
output   W_BRAM_0_6_ce0;
input  [15:0] W_BRAM_0_6_q0;
output  [4:0] W_BRAM_0_7_address0;
output   W_BRAM_0_7_ce0;
input  [15:0] W_BRAM_0_7_q0;
output  [4:0] W_BRAM_1_0_address0;
output   W_BRAM_1_0_ce0;
input  [15:0] W_BRAM_1_0_q0;
output  [4:0] W_BRAM_1_1_address0;
output   W_BRAM_1_1_ce0;
input  [15:0] W_BRAM_1_1_q0;
output  [4:0] W_BRAM_1_2_address0;
output   W_BRAM_1_2_ce0;
input  [15:0] W_BRAM_1_2_q0;
output  [4:0] W_BRAM_1_3_address0;
output   W_BRAM_1_3_ce0;
input  [15:0] W_BRAM_1_3_q0;
output  [4:0] W_BRAM_1_4_address0;
output   W_BRAM_1_4_ce0;
input  [15:0] W_BRAM_1_4_q0;
output  [4:0] W_BRAM_1_5_address0;
output   W_BRAM_1_5_ce0;
input  [15:0] W_BRAM_1_5_q0;
output  [4:0] W_BRAM_1_6_address0;
output   W_BRAM_1_6_ce0;
input  [15:0] W_BRAM_1_6_q0;
output  [4:0] W_BRAM_1_7_address0;
output   W_BRAM_1_7_ce0;
input  [15:0] W_BRAM_1_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg O_BRAM_0_ce0;
reg O_BRAM_0_ce1;
reg O_BRAM_0_we1;
reg O_BRAM_1_ce0;
reg O_BRAM_1_ce1;
reg O_BRAM_1_we1;
reg I_BRAM_0_ce0;
reg I_BRAM_1_ce0;
reg I_BRAM_2_ce0;
reg I_BRAM_3_ce0;
reg I_BRAM_4_ce0;
reg I_BRAM_5_ce0;
reg I_BRAM_6_ce0;
reg I_BRAM_7_ce0;
reg W_BRAM_0_0_ce0;
reg W_BRAM_0_1_ce0;
reg W_BRAM_0_2_ce0;
reg W_BRAM_0_3_ce0;
reg W_BRAM_0_4_ce0;
reg W_BRAM_0_5_ce0;
reg W_BRAM_0_6_ce0;
reg W_BRAM_0_7_ce0;
reg W_BRAM_1_0_ce0;
reg W_BRAM_1_1_ce0;
reg W_BRAM_1_2_ce0;
reg W_BRAM_1_3_ce0;
reg W_BRAM_1_4_ce0;
reg W_BRAM_1_5_ce0;
reg W_BRAM_1_6_ce0;
reg W_BRAM_1_7_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten3_reg_428;
reg   [12:0] indvar_flatten4_reg_439;
reg   [9:0] indvar_flatten_reg_450;
reg   [2:0] r_reg_461;
reg   [2:0] s_reg_472;
reg   [4:0] te_reg_483;
reg   [4:0] tf_reg_494;
wire   [0:0] exitcond_flatten4_fu_505_p2;
reg   [0:0] exitcond_flatten4_reg_1018;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten4_reg_1018;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten4_reg_1018;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten4_reg_1018;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten4_reg_1018;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten4_reg_1018;
wire   [14:0] indvar_flatten_next4_fu_511_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten_fu_517_p2;
reg   [0:0] exitcond_flatten_reg_1027;
wire   [0:0] not_exitcond_flatten_fu_523_p2;
reg   [0:0] not_exitcond_flatten_reg_1038;
wire   [0:0] exitcond_flatten1_fu_529_p2;
reg   [0:0] exitcond_flatten1_reg_1043;
wire   [0:0] exitcond_flatten_mid_fu_535_p2;
reg   [0:0] exitcond_flatten_mid_reg_1048;
wire   [0:0] tmp_13_fu_541_p2;
reg   [0:0] tmp_13_reg_1056;
wire   [9:0] indvar_flatten_next_fu_553_p3;
wire   [12:0] indvar_flatten_next3_fu_567_p3;
wire   [2:0] r_cast1_mid2_fu_634_p3;
reg   [2:0] r_cast1_mid2_reg_1071;
reg    ap_enable_reg_pp0_iter1;
wire   [2:0] s_cast1_mid2_fu_708_p3;
reg   [2:0] s_cast1_mid2_reg_1076;
wire   [4:0] tmp_4_mid2_v_fu_739_p3;
reg   [4:0] tmp_4_mid2_v_reg_1081;
reg   [4:0] ap_reg_pp0_iter2_tmp_4_mid2_v_reg_1081;
wire   [4:0] tf_mid2_fu_785_p3;
reg   [4:0] tf_mid2_reg_1086;
reg   [4:0] ap_reg_pp0_iter2_tf_mid2_reg_1086;
reg   [4:0] ap_reg_pp0_iter3_tf_mid2_reg_1086;
wire   [4:0] tmp_6_mid2_fu_799_p3;
reg   [4:0] tmp_6_mid2_reg_1091;
wire   [4:0] tmp_7_mid2_fu_807_p3;
reg   [4:0] tmp_7_mid2_reg_1097;
reg   [4:0] ap_reg_pp0_iter2_tmp_7_mid2_reg_1097;
reg   [4:0] ap_reg_pp0_iter3_tmp_7_mid2_reg_1097;
wire   [4:0] tmp_8_fu_815_p2;
reg   [4:0] tmp_8_reg_1103;
wire   [4:0] tf_1_fu_821_p2;
wire   [63:0] tmp_32_cast_fu_856_p1;
reg   [63:0] tmp_32_cast_reg_1113;
wire   [63:0] tmp_4_mid2_fu_863_p1;
reg   [63:0] tmp_4_mid2_reg_1137;
reg  signed [15:0] I_BRAM_2_load_reg_1180;
reg  signed [15:0] I_BRAM_4_load_reg_1191;
reg  signed [15:0] I_BRAM_7_load_reg_1207;
reg   [9:0] O_BRAM_0_addr_reg_1248;
reg   [9:0] ap_reg_pp0_iter5_O_BRAM_0_addr_reg_1248;
reg   [9:0] O_BRAM_1_addr_reg_1254;
reg   [9:0] ap_reg_pp0_iter5_O_BRAM_1_addr_reg_1254;
reg  signed [15:0] I_BRAM_0_load_reg_1260;
reg  signed [15:0] W_BRAM_0_0_load_reg_1266;
reg  signed [15:0] I_BRAM_1_load_reg_1271;
reg  signed [15:0] W_BRAM_0_1_load_reg_1277;
wire  signed [15:0] tmp_52_0_2_fu_926_p2;
reg  signed [15:0] tmp_52_0_2_reg_1282;
reg  signed [15:0] I_BRAM_3_load_reg_1287;
wire  signed [15:0] tmp_52_0_4_fu_931_p2;
reg  signed [15:0] tmp_52_0_4_reg_1298;
reg  signed [15:0] I_BRAM_5_load_reg_1303;
reg  signed [15:0] I_BRAM_6_load_reg_1314;
reg  signed [15:0] W_BRAM_0_6_load_reg_1320;
wire  signed [15:0] tmp_52_0_7_fu_936_p2;
reg  signed [15:0] tmp_52_0_7_reg_1325;
reg  signed [15:0] W_BRAM_1_0_load_reg_1330;
reg  signed [15:0] W_BRAM_1_1_load_reg_1335;
wire  signed [15:0] tmp_52_1_2_fu_941_p2;
reg  signed [15:0] tmp_52_1_2_reg_1340;
wire  signed [15:0] tmp_52_1_4_fu_946_p2;
reg  signed [15:0] tmp_52_1_4_reg_1350;
reg  signed [15:0] W_BRAM_1_6_load_reg_1360;
wire  signed [15:0] tmp_52_1_7_fu_951_p2;
reg  signed [15:0] tmp_52_1_7_reg_1365;
(* use_dsp48 = "no" *) wire   [15:0] tmp2_fu_889_p2;
reg   [15:0] tmp2_reg_1370;
wire  signed [15:0] grp_fu_969_p3;
reg  signed [15:0] tmp6_reg_1375;
reg    ap_enable_reg_pp0_iter5;
wire  signed [15:0] grp_fu_975_p3;
reg  signed [15:0] tmp7_reg_1380;
(* use_dsp48 = "no" *) wire   [15:0] tmp9_fu_893_p2;
reg   [15:0] tmp9_reg_1385;
wire  signed [15:0] grp_fu_1000_p3;
reg  signed [15:0] tmp13_reg_1390;
wire  signed [15:0] grp_fu_1006_p3;
reg  signed [15:0] tmp14_reg_1395;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg   [2:0] ap_phi_mux_r_phi_fu_465_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_s_phi_fu_476_p4;
reg   [4:0] ap_phi_mux_te_phi_fu_487_p4;
wire   [63:0] tmp_33_cast_fu_884_p1;
wire   [9:0] indvar_flatten_op_fu_547_p2;
wire   [12:0] indvar_flatten33_op_fu_561_p2;
wire   [3:0] r_cast_fu_579_p1;
wire   [3:0] s_cast_fu_591_p1;
wire   [3:0] tmp1_fu_595_p2;
wire   [4:0] tmp1_cast_fu_601_p1;
wire   [4:0] p_shl_fu_583_p3;
wire   [4:0] r_cast1_fu_575_p1;
wire   [2:0] r_1_fu_617_p2;
wire   [4:0] p_shl_mid1_fu_649_p3;
wire   [4:0] r_cast1_mid1_fu_630_p1;
wire   [4:0] tmp_mid_fu_664_p2;
wire   [4:0] tmp_s_fu_605_p2;
wire   [4:0] tmp_5_fu_611_p2;
wire   [0:0] exitcond_fu_684_p2;
wire   [2:0] s_mid_fu_623_p3;
wire   [2:0] s_1_fu_695_p2;
wire   [3:0] s_cast_mid1_fu_719_p1;
wire   [3:0] r_cast_mid2_cast_fu_645_p1;
wire   [3:0] tmp1_mid1_fu_723_p2;
wire   [4:0] p_shl_mid2_fu_657_p3;
wire   [4:0] tmp1_cast_mid1_fu_729_p1;
wire   [4:0] tmp_mid1_fu_733_p2;
wire   [4:0] tmp_4_mid256_v_fu_670_p3;
wire   [4:0] r_cast1_mid2_cast_fu_641_p1;
wire   [4:0] tmp_6_mid3_fu_677_p3;
wire   [0:0] exitcond_flatten_not_fu_753_p2;
wire   [0:0] exitcond3_mid_fu_690_p2;
wire   [0:0] not_exitcond_flatten_1_fu_758_p2;
wire   [4:0] te_mid_fu_701_p3;
wire   [0:0] exitcond3_mid1_fu_763_p2;
wire   [0:0] tmp_14_fu_775_p2;
wire   [0:0] tmp_34_fu_780_p2;
wire   [4:0] te_1_fu_769_p2;
wire   [4:0] tmp_5_mid1_fu_793_p2;
wire   [4:0] tmp_6_mid5_fu_746_p3;
wire   [4:0] s_cast1_mid2_cast_fu_715_p1;
wire   [9:0] tmp_35_fu_830_p3;
wire   [10:0] p_shl2_cast_fu_837_p1;
wire   [10:0] tmp_6_mid2_cast_fu_827_p1;
wire   [10:0] tmp_15_fu_841_p2;
wire   [10:0] tmp_9_cast_fu_847_p1;
wire   [10:0] tmp_17_fu_850_p2;
wire   [9:0] grp_fu_917_p3;
wire  signed [15:0] grp_fu_956_p3;
wire  signed [15:0] grp_fu_963_p3;
wire  signed [15:0] grp_fu_987_p3;
wire  signed [15:0] grp_fu_994_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp5_fu_897_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp12_fu_907_p2;
wire   [4:0] grp_fu_917_p0;
wire   [5:0] grp_fu_917_p1;
wire   [4:0] grp_fu_917_p2;
wire  signed [15:0] grp_fu_981_p3;
wire  signed [15:0] grp_fu_1012_p3;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_917_p00;
wire   [9:0] grp_fu_917_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

HLS8x2_2_mac_mulabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
HLS8x2_2_mac_mulabkb_U31(
    .din0(grp_fu_917_p0),
    .din1(grp_fu_917_p1),
    .din2(grp_fu_917_p2),
    .dout(grp_fu_917_p3)
);

HLS8x2_2_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mul_mul_cud_U32(
    .din0(W_BRAM_0_2_q0),
    .din1(I_BRAM_2_load_reg_1180),
    .dout(tmp_52_0_2_fu_926_p2)
);

HLS8x2_2_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mul_mul_cud_U33(
    .din0(W_BRAM_0_4_q0),
    .din1(I_BRAM_4_load_reg_1191),
    .dout(tmp_52_0_4_fu_931_p2)
);

HLS8x2_2_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mul_mul_cud_U34(
    .din0(W_BRAM_0_7_q0),
    .din1(I_BRAM_7_load_reg_1207),
    .dout(tmp_52_0_7_fu_936_p2)
);

HLS8x2_2_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mul_mul_cud_U35(
    .din0(W_BRAM_1_2_q0),
    .din1(I_BRAM_2_load_reg_1180),
    .dout(tmp_52_1_2_fu_941_p2)
);

HLS8x2_2_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mul_mul_cud_U36(
    .din0(W_BRAM_1_4_q0),
    .din1(I_BRAM_4_load_reg_1191),
    .dout(tmp_52_1_4_fu_946_p2)
);

HLS8x2_2_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mul_mul_cud_U37(
    .din0(W_BRAM_1_7_q0),
    .din1(I_BRAM_7_load_reg_1207),
    .dout(tmp_52_1_7_fu_951_p2)
);

HLS8x2_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_muladEe_U38(
    .din0(W_BRAM_0_0_load_reg_1266),
    .din1(I_BRAM_0_load_reg_1260),
    .din2(O_BRAM_0_q0),
    .dout(grp_fu_956_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U39(
    .din0(W_BRAM_0_1_load_reg_1277),
    .din1(I_BRAM_1_load_reg_1271),
    .din2(tmp_52_0_2_reg_1282),
    .dout(grp_fu_963_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U40(
    .din0(W_BRAM_0_3_q0),
    .din1(I_BRAM_3_load_reg_1287),
    .din2(tmp_52_0_4_reg_1298),
    .dout(grp_fu_969_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U41(
    .din0(W_BRAM_0_5_q0),
    .din1(I_BRAM_5_load_reg_1303),
    .din2(grp_fu_981_p3),
    .dout(grp_fu_975_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U42(
    .din0(W_BRAM_0_6_load_reg_1320),
    .din1(I_BRAM_6_load_reg_1314),
    .din2(tmp_52_0_7_reg_1325),
    .dout(grp_fu_981_p3)
);

HLS8x2_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_muladEe_U43(
    .din0(W_BRAM_1_0_load_reg_1330),
    .din1(I_BRAM_0_load_reg_1260),
    .din2(O_BRAM_1_q0),
    .dout(grp_fu_987_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U44(
    .din0(W_BRAM_1_1_load_reg_1335),
    .din1(I_BRAM_1_load_reg_1271),
    .din2(tmp_52_1_2_reg_1340),
    .dout(grp_fu_994_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U45(
    .din0(W_BRAM_1_3_q0),
    .din1(I_BRAM_3_load_reg_1287),
    .din2(tmp_52_1_4_reg_1350),
    .dout(grp_fu_1000_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U46(
    .din0(W_BRAM_1_5_q0),
    .din1(I_BRAM_5_load_reg_1303),
    .din2(grp_fu_1012_p3),
    .dout(grp_fu_1006_p3)
);

HLS8x2_2_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS8x2_2_mac_mulaeOg_U47(
    .din0(W_BRAM_1_6_load_reg_1360),
    .din1(I_BRAM_6_load_reg_1314),
    .din2(tmp_52_1_7_reg_1365),
    .dout(grp_fu_1012_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten4_fu_505_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_505_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten3_reg_428 <= indvar_flatten_next4_fu_511_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_428 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_505_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten4_reg_439 <= indvar_flatten_next3_fu_567_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten4_reg_439 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_505_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_450 <= indvar_flatten_next_fu_553_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_450 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_reg_461 <= r_cast1_mid2_reg_1071;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_461 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_reg_472 <= s_cast1_mid2_reg_1076;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_reg_472 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        te_reg_483 <= tmp_7_mid2_reg_1097;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        te_reg_483 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1018 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tf_reg_494 <= tf_1_fu_821_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tf_reg_494 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_0_load_reg_1260 <= I_BRAM_0_q0;
        I_BRAM_1_load_reg_1271 <= I_BRAM_1_q0;
        I_BRAM_3_load_reg_1287 <= I_BRAM_3_q0;
        I_BRAM_5_load_reg_1303 <= I_BRAM_5_q0;
        I_BRAM_6_load_reg_1314 <= I_BRAM_6_q0;
        O_BRAM_0_addr_reg_1248 <= tmp_33_cast_fu_884_p1;
        O_BRAM_1_addr_reg_1254 <= tmp_33_cast_fu_884_p1;
        W_BRAM_0_0_load_reg_1266 <= W_BRAM_0_0_q0;
        W_BRAM_0_1_load_reg_1277 <= W_BRAM_0_1_q0;
        W_BRAM_0_6_load_reg_1320 <= W_BRAM_0_6_q0;
        W_BRAM_1_0_load_reg_1330 <= W_BRAM_1_0_q0;
        W_BRAM_1_1_load_reg_1335 <= W_BRAM_1_1_q0;
        W_BRAM_1_6_load_reg_1360 <= W_BRAM_1_6_q0;
        tmp_52_0_2_reg_1282 <= tmp_52_0_2_fu_926_p2;
        tmp_52_0_4_reg_1298 <= tmp_52_0_4_fu_931_p2;
        tmp_52_0_7_reg_1325 <= tmp_52_0_7_fu_936_p2;
        tmp_52_1_2_reg_1340 <= tmp_52_1_2_fu_941_p2;
        tmp_52_1_4_reg_1350 <= tmp_52_1_4_fu_946_p2;
        tmp_52_1_7_reg_1365 <= tmp_52_1_7_fu_951_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_2_load_reg_1180 <= I_BRAM_2_q0;
        I_BRAM_4_load_reg_1191 <= I_BRAM_4_q0;
        I_BRAM_7_load_reg_1207 <= I_BRAM_7_q0;
        tmp_4_mid2_reg_1137[4 : 0] <= tmp_4_mid2_fu_863_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 <= exitcond_flatten4_reg_1018;
        exitcond_flatten4_reg_1018 <= exitcond_flatten4_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_flatten4_reg_1018 <= ap_reg_pp0_iter1_exitcond_flatten4_reg_1018;
        ap_reg_pp0_iter2_tf_mid2_reg_1086 <= tf_mid2_reg_1086;
        ap_reg_pp0_iter2_tmp_4_mid2_v_reg_1081 <= tmp_4_mid2_v_reg_1081;
        ap_reg_pp0_iter2_tmp_7_mid2_reg_1097 <= tmp_7_mid2_reg_1097;
        ap_reg_pp0_iter3_exitcond_flatten4_reg_1018 <= ap_reg_pp0_iter2_exitcond_flatten4_reg_1018;
        ap_reg_pp0_iter3_tf_mid2_reg_1086 <= ap_reg_pp0_iter2_tf_mid2_reg_1086;
        ap_reg_pp0_iter3_tmp_7_mid2_reg_1097 <= ap_reg_pp0_iter2_tmp_7_mid2_reg_1097;
        ap_reg_pp0_iter4_exitcond_flatten4_reg_1018 <= ap_reg_pp0_iter3_exitcond_flatten4_reg_1018;
        ap_reg_pp0_iter5_O_BRAM_0_addr_reg_1248 <= O_BRAM_0_addr_reg_1248;
        ap_reg_pp0_iter5_O_BRAM_1_addr_reg_1254 <= O_BRAM_1_addr_reg_1254;
        ap_reg_pp0_iter5_exitcond_flatten4_reg_1018 <= ap_reg_pp0_iter4_exitcond_flatten4_reg_1018;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_505_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_1043 <= exitcond_flatten1_fu_529_p2;
        exitcond_flatten_mid_reg_1048 <= exitcond_flatten_mid_fu_535_p2;
        exitcond_flatten_reg_1027 <= exitcond_flatten_fu_517_p2;
        not_exitcond_flatten_reg_1038 <= not_exitcond_flatten_fu_523_p2;
        tmp_13_reg_1056 <= tmp_13_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1018 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_cast1_mid2_reg_1071 <= r_cast1_mid2_fu_634_p3;
        s_cast1_mid2_reg_1076 <= s_cast1_mid2_fu_708_p3;
        tmp_7_mid2_reg_1097 <= tmp_7_mid2_fu_807_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1018 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tf_mid2_reg_1086 <= tf_mid2_fu_785_p3;
        tmp_4_mid2_v_reg_1081 <= tmp_4_mid2_v_fu_739_p3;
        tmp_6_mid2_reg_1091 <= tmp_6_mid2_fu_799_p3;
        tmp_8_reg_1103 <= tmp_8_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter4_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        tmp13_reg_1390 <= grp_fu_1000_p3;
        tmp14_reg_1395 <= grp_fu_1006_p3;
        tmp6_reg_1375 <= grp_fu_969_p3;
        tmp7_reg_1380 <= grp_fu_975_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter4_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_reg_1370 <= tmp2_fu_889_p2;
        tmp9_reg_1385 <= tmp9_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_32_cast_reg_1113[10 : 0] <= tmp_32_cast_fu_856_p1[10 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_0_ce0 = 1'b1;
    end else begin
        I_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_1_ce0 = 1'b1;
    end else begin
        I_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_2_ce0 = 1'b1;
    end else begin
        I_BRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_3_ce0 = 1'b1;
    end else begin
        I_BRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_4_ce0 = 1'b1;
    end else begin
        I_BRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_5_ce0 = 1'b1;
    end else begin
        I_BRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        I_BRAM_6_ce0 = 1'b1;
    end else begin
        I_BRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_7_ce0 = 1'b1;
    end else begin
        I_BRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        O_BRAM_0_ce0 = 1'b1;
    end else begin
        O_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_0_ce1 = 1'b1;
    end else begin
        O_BRAM_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_0_we1 = 1'b1;
    end else begin
        O_BRAM_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        O_BRAM_1_ce0 = 1'b1;
    end else begin
        O_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_1_ce1 = 1'b1;
    end else begin
        O_BRAM_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1018 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_1_we1 = 1'b1;
    end else begin
        O_BRAM_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_0_ce0 = 1'b1;
    end else begin
        W_BRAM_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_1_ce0 = 1'b1;
    end else begin
        W_BRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_2_ce0 = 1'b1;
    end else begin
        W_BRAM_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_0_3_ce0 = 1'b1;
    end else begin
        W_BRAM_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_4_ce0 = 1'b1;
    end else begin
        W_BRAM_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_0_5_ce0 = 1'b1;
    end else begin
        W_BRAM_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_6_ce0 = 1'b1;
    end else begin
        W_BRAM_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_7_ce0 = 1'b1;
    end else begin
        W_BRAM_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_0_ce0 = 1'b1;
    end else begin
        W_BRAM_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_1_ce0 = 1'b1;
    end else begin
        W_BRAM_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_2_ce0 = 1'b1;
    end else begin
        W_BRAM_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_1_3_ce0 = 1'b1;
    end else begin
        W_BRAM_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_4_ce0 = 1'b1;
    end else begin
        W_BRAM_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_1_5_ce0 = 1'b1;
    end else begin
        W_BRAM_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_6_ce0 = 1'b1;
    end else begin
        W_BRAM_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_7_ce0 = 1'b1;
    end else begin
        W_BRAM_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_r_phi_fu_465_p4 = r_cast1_mid2_reg_1071;
    end else begin
        ap_phi_mux_r_phi_fu_465_p4 = r_reg_461;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_s_phi_fu_476_p4 = s_cast1_mid2_reg_1076;
    end else begin
        ap_phi_mux_s_phi_fu_476_p4 = s_reg_472;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1018 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_te_phi_fu_487_p4 = tmp_7_mid2_reg_1097;
    end else begin
        ap_phi_mux_te_phi_fu_487_p4 = te_reg_483;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_BRAM_0_address0 = tmp_32_cast_reg_1113;

assign I_BRAM_1_address0 = tmp_32_cast_reg_1113;

assign I_BRAM_2_address0 = tmp_32_cast_fu_856_p1;

assign I_BRAM_3_address0 = tmp_32_cast_reg_1113;

assign I_BRAM_4_address0 = tmp_32_cast_fu_856_p1;

assign I_BRAM_5_address0 = tmp_32_cast_reg_1113;

assign I_BRAM_6_address0 = tmp_32_cast_reg_1113;

assign I_BRAM_7_address0 = tmp_32_cast_fu_856_p1;

assign O_BRAM_0_address0 = tmp_33_cast_fu_884_p1;

assign O_BRAM_0_address1 = ap_reg_pp0_iter5_O_BRAM_0_addr_reg_1248;

assign O_BRAM_0_d1 = (tmp2_reg_1370 + tmp5_fu_897_p2);

assign O_BRAM_1_address0 = tmp_33_cast_fu_884_p1;

assign O_BRAM_1_address1 = ap_reg_pp0_iter5_O_BRAM_1_addr_reg_1254;

assign O_BRAM_1_d1 = (tmp9_reg_1385 + tmp12_fu_907_p2);

assign W_BRAM_0_0_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_0_1_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_0_2_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_0_3_address0 = tmp_4_mid2_reg_1137;

assign W_BRAM_0_4_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_0_5_address0 = tmp_4_mid2_reg_1137;

assign W_BRAM_0_6_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_0_7_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_1_0_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_1_1_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_1_2_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_1_3_address0 = tmp_4_mid2_reg_1137;

assign W_BRAM_1_4_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_1_5_address0 = tmp_4_mid2_reg_1137;

assign W_BRAM_1_6_address0 = tmp_4_mid2_fu_863_p1;

assign W_BRAM_1_7_address0 = tmp_4_mid2_fu_863_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond3_mid1_fu_763_p2 = (not_exitcond_flatten_1_fu_758_p2 & exitcond3_mid_fu_690_p2);

assign exitcond3_mid_fu_690_p2 = (not_exitcond_flatten_reg_1038 & exitcond_fu_684_p2);

assign exitcond_flatten1_fu_529_p2 = ((indvar_flatten_reg_450 == 10'd729) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_505_p2 = ((indvar_flatten3_reg_428 == 15'd18225) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_517_p2 = ((indvar_flatten4_reg_439 == 13'd3645) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_535_p2 = (not_exitcond_flatten_fu_523_p2 & exitcond_flatten1_fu_529_p2);

assign exitcond_flatten_not_fu_753_p2 = (exitcond_flatten1_reg_1043 ^ 1'd1);

assign exitcond_fu_684_p2 = ((tf_reg_494 == 5'd27) ? 1'b1 : 1'b0);

assign grp_fu_917_p0 = grp_fu_917_p00;

assign grp_fu_917_p00 = ap_reg_pp0_iter3_tmp_7_mid2_reg_1097;

assign grp_fu_917_p1 = 10'd27;

assign grp_fu_917_p2 = grp_fu_917_p20;

assign grp_fu_917_p20 = ap_reg_pp0_iter3_tf_mid2_reg_1086;

assign indvar_flatten33_op_fu_561_p2 = (indvar_flatten4_reg_439 + 13'd1);

assign indvar_flatten_next3_fu_567_p3 = ((exitcond_flatten_fu_517_p2[0:0] === 1'b1) ? 13'd1 : indvar_flatten33_op_fu_561_p2);

assign indvar_flatten_next4_fu_511_p2 = (indvar_flatten3_reg_428 + 15'd1);

assign indvar_flatten_next_fu_553_p3 = ((tmp_13_fu_541_p2[0:0] === 1'b1) ? 10'd1 : indvar_flatten_op_fu_547_p2);

assign indvar_flatten_op_fu_547_p2 = (indvar_flatten_reg_450 + 10'd1);

assign not_exitcond_flatten_1_fu_758_p2 = (exitcond_flatten_reg_1027 | exitcond_flatten_not_fu_753_p2);

assign not_exitcond_flatten_fu_523_p2 = (exitcond_flatten_fu_517_p2 ^ 1'd1);

assign p_shl2_cast_fu_837_p1 = tmp_35_fu_830_p3;

assign p_shl_fu_583_p3 = {{ap_phi_mux_r_phi_fu_465_p4}, {2'd0}};

assign p_shl_mid1_fu_649_p3 = {{r_1_fu_617_p2}, {2'd0}};

assign p_shl_mid2_fu_657_p3 = ((exitcond_flatten_reg_1027[0:0] === 1'b1) ? p_shl_mid1_fu_649_p3 : p_shl_fu_583_p3);

assign r_1_fu_617_p2 = (ap_phi_mux_r_phi_fu_465_p4 + 3'd1);

assign r_cast1_fu_575_p1 = ap_phi_mux_r_phi_fu_465_p4;

assign r_cast1_mid1_fu_630_p1 = r_1_fu_617_p2;

assign r_cast1_mid2_cast_fu_641_p1 = r_cast1_mid2_fu_634_p3;

assign r_cast1_mid2_fu_634_p3 = ((exitcond_flatten_reg_1027[0:0] === 1'b1) ? r_1_fu_617_p2 : ap_phi_mux_r_phi_fu_465_p4);

assign r_cast_fu_579_p1 = ap_phi_mux_r_phi_fu_465_p4;

assign r_cast_mid2_cast_fu_645_p1 = r_cast1_mid2_fu_634_p3;

assign s_1_fu_695_p2 = (s_mid_fu_623_p3 + 3'd1);

assign s_cast1_mid2_cast_fu_715_p1 = s_cast1_mid2_fu_708_p3;

assign s_cast1_mid2_fu_708_p3 = ((exitcond_flatten_mid_reg_1048[0:0] === 1'b1) ? s_1_fu_695_p2 : s_mid_fu_623_p3);

assign s_cast_fu_591_p1 = ap_phi_mux_s_phi_fu_476_p4;

assign s_cast_mid1_fu_719_p1 = s_1_fu_695_p2;

assign s_mid_fu_623_p3 = ((exitcond_flatten_reg_1027[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_s_phi_fu_476_p4);

assign te_1_fu_769_p2 = (te_mid_fu_701_p3 + 5'd1);

assign te_mid_fu_701_p3 = ((tmp_13_reg_1056[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_te_phi_fu_487_p4);

assign tf_1_fu_821_p2 = (tf_mid2_fu_785_p3 + 5'd1);

assign tf_mid2_fu_785_p3 = ((tmp_34_fu_780_p2[0:0] === 1'b1) ? 5'd0 : tf_reg_494);

assign tmp12_fu_907_p2 = ($signed(tmp13_reg_1390) + $signed(tmp14_reg_1395));

assign tmp1_cast_fu_601_p1 = tmp1_fu_595_p2;

assign tmp1_cast_mid1_fu_729_p1 = tmp1_mid1_fu_723_p2;

assign tmp1_fu_595_p2 = (r_cast_fu_579_p1 + s_cast_fu_591_p1);

assign tmp1_mid1_fu_723_p2 = (s_cast_mid1_fu_719_p1 + r_cast_mid2_cast_fu_645_p1);

assign tmp2_fu_889_p2 = ($signed(grp_fu_956_p3) + $signed(grp_fu_963_p3));

assign tmp5_fu_897_p2 = ($signed(tmp6_reg_1375) + $signed(tmp7_reg_1380));

assign tmp9_fu_893_p2 = ($signed(grp_fu_987_p3) + $signed(grp_fu_994_p3));

assign tmp_13_fu_541_p2 = (exitcond_flatten_mid_fu_535_p2 | exitcond_flatten_fu_517_p2);

assign tmp_14_fu_775_p2 = (exitcond_flatten_mid_reg_1048 | exitcond3_mid1_fu_763_p2);

assign tmp_15_fu_841_p2 = (p_shl2_cast_fu_837_p1 - tmp_6_mid2_cast_fu_827_p1);

assign tmp_17_fu_850_p2 = (tmp_15_fu_841_p2 + tmp_9_cast_fu_847_p1);

assign tmp_32_cast_fu_856_p1 = tmp_17_fu_850_p2;

assign tmp_33_cast_fu_884_p1 = grp_fu_917_p3;

assign tmp_34_fu_780_p2 = (tmp_14_fu_775_p2 | exitcond_flatten_reg_1027);

assign tmp_35_fu_830_p3 = {{tmp_6_mid2_reg_1091}, {5'd0}};

assign tmp_4_mid256_v_fu_670_p3 = ((exitcond_flatten_reg_1027[0:0] === 1'b1) ? tmp_mid_fu_664_p2 : tmp_s_fu_605_p2);

assign tmp_4_mid2_fu_863_p1 = ap_reg_pp0_iter2_tmp_4_mid2_v_reg_1081;

assign tmp_4_mid2_v_fu_739_p3 = ((exitcond_flatten_mid_reg_1048[0:0] === 1'b1) ? tmp_mid1_fu_733_p2 : tmp_4_mid256_v_fu_670_p3);

assign tmp_5_fu_611_p2 = (r_cast1_fu_575_p1 + ap_phi_mux_te_phi_fu_487_p4);

assign tmp_5_mid1_fu_793_p2 = (te_1_fu_769_p2 + r_cast1_mid2_cast_fu_641_p1);

assign tmp_6_mid2_cast_fu_827_p1 = tmp_6_mid2_reg_1091;

assign tmp_6_mid2_fu_799_p3 = ((exitcond3_mid1_fu_763_p2[0:0] === 1'b1) ? tmp_5_mid1_fu_793_p2 : tmp_6_mid5_fu_746_p3);

assign tmp_6_mid3_fu_677_p3 = ((exitcond_flatten_reg_1027[0:0] === 1'b1) ? r_cast1_mid1_fu_630_p1 : tmp_5_fu_611_p2);

assign tmp_6_mid5_fu_746_p3 = ((exitcond_flatten_mid_reg_1048[0:0] === 1'b1) ? r_cast1_mid2_cast_fu_641_p1 : tmp_6_mid3_fu_677_p3);

assign tmp_7_mid2_fu_807_p3 = ((exitcond3_mid1_fu_763_p2[0:0] === 1'b1) ? te_1_fu_769_p2 : te_mid_fu_701_p3);

assign tmp_8_fu_815_p2 = (tf_mid2_fu_785_p3 + s_cast1_mid2_cast_fu_715_p1);

assign tmp_9_cast_fu_847_p1 = tmp_8_reg_1103;

assign tmp_mid1_fu_733_p2 = (p_shl_mid2_fu_657_p3 + tmp1_cast_mid1_fu_729_p1);

assign tmp_mid_fu_664_p2 = (p_shl_mid1_fu_649_p3 + r_cast1_mid1_fu_630_p1);

assign tmp_s_fu_605_p2 = (tmp1_cast_fu_601_p1 + p_shl_fu_583_p3);

always @ (posedge ap_clk) begin
    tmp_32_cast_reg_1113[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_4_mid2_reg_1137[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //computation
