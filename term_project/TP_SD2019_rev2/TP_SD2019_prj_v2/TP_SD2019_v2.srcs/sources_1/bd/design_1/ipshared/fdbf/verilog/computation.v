// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module computation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        O_BRAM_0_address0,
        O_BRAM_0_ce0,
        O_BRAM_0_q0,
        O_BRAM_0_address1,
        O_BRAM_0_ce1,
        O_BRAM_0_we1,
        O_BRAM_0_d1,
        O_BRAM_1_address0,
        O_BRAM_1_ce0,
        O_BRAM_1_q0,
        O_BRAM_1_address1,
        O_BRAM_1_ce1,
        O_BRAM_1_we1,
        O_BRAM_1_d1,
        O_BRAM_2_address0,
        O_BRAM_2_ce0,
        O_BRAM_2_q0,
        O_BRAM_2_address1,
        O_BRAM_2_ce1,
        O_BRAM_2_we1,
        O_BRAM_2_d1,
        O_BRAM_3_address0,
        O_BRAM_3_ce0,
        O_BRAM_3_q0,
        O_BRAM_3_address1,
        O_BRAM_3_ce1,
        O_BRAM_3_we1,
        O_BRAM_3_d1,
        O_BRAM_4_address0,
        O_BRAM_4_ce0,
        O_BRAM_4_q0,
        O_BRAM_4_address1,
        O_BRAM_4_ce1,
        O_BRAM_4_we1,
        O_BRAM_4_d1,
        O_BRAM_5_address0,
        O_BRAM_5_ce0,
        O_BRAM_5_q0,
        O_BRAM_5_address1,
        O_BRAM_5_ce1,
        O_BRAM_5_we1,
        O_BRAM_5_d1,
        O_BRAM_6_address0,
        O_BRAM_6_ce0,
        O_BRAM_6_q0,
        O_BRAM_6_address1,
        O_BRAM_6_ce1,
        O_BRAM_6_we1,
        O_BRAM_6_d1,
        O_BRAM_7_address0,
        O_BRAM_7_ce0,
        O_BRAM_7_q0,
        O_BRAM_7_address1,
        O_BRAM_7_ce1,
        O_BRAM_7_we1,
        O_BRAM_7_d1,
        I_BRAM_0_address0,
        I_BRAM_0_ce0,
        I_BRAM_0_q0,
        I_BRAM_1_address0,
        I_BRAM_1_ce0,
        I_BRAM_1_q0,
        W_BRAM_0_0_address0,
        W_BRAM_0_0_ce0,
        W_BRAM_0_0_q0,
        W_BRAM_0_1_address0,
        W_BRAM_0_1_ce0,
        W_BRAM_0_1_q0,
        W_BRAM_1_0_address0,
        W_BRAM_1_0_ce0,
        W_BRAM_1_0_q0,
        W_BRAM_1_1_address0,
        W_BRAM_1_1_ce0,
        W_BRAM_1_1_q0,
        W_BRAM_2_0_address0,
        W_BRAM_2_0_ce0,
        W_BRAM_2_0_q0,
        W_BRAM_2_1_address0,
        W_BRAM_2_1_ce0,
        W_BRAM_2_1_q0,
        W_BRAM_3_0_address0,
        W_BRAM_3_0_ce0,
        W_BRAM_3_0_q0,
        W_BRAM_3_1_address0,
        W_BRAM_3_1_ce0,
        W_BRAM_3_1_q0,
        W_BRAM_4_0_address0,
        W_BRAM_4_0_ce0,
        W_BRAM_4_0_q0,
        W_BRAM_4_1_address0,
        W_BRAM_4_1_ce0,
        W_BRAM_4_1_q0,
        W_BRAM_5_0_address0,
        W_BRAM_5_0_ce0,
        W_BRAM_5_0_q0,
        W_BRAM_5_1_address0,
        W_BRAM_5_1_ce0,
        W_BRAM_5_1_q0,
        W_BRAM_6_0_address0,
        W_BRAM_6_0_ce0,
        W_BRAM_6_0_q0,
        W_BRAM_6_1_address0,
        W_BRAM_6_1_ce0,
        W_BRAM_6_1_q0,
        W_BRAM_7_0_address0,
        W_BRAM_7_0_ce0,
        W_BRAM_7_0_q0,
        W_BRAM_7_1_address0,
        W_BRAM_7_1_ce0,
        W_BRAM_7_1_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] O_BRAM_0_address0;
output   O_BRAM_0_ce0;
input  [15:0] O_BRAM_0_q0;
output  [9:0] O_BRAM_0_address1;
output   O_BRAM_0_ce1;
output   O_BRAM_0_we1;
output  [15:0] O_BRAM_0_d1;
output  [9:0] O_BRAM_1_address0;
output   O_BRAM_1_ce0;
input  [15:0] O_BRAM_1_q0;
output  [9:0] O_BRAM_1_address1;
output   O_BRAM_1_ce1;
output   O_BRAM_1_we1;
output  [15:0] O_BRAM_1_d1;
output  [9:0] O_BRAM_2_address0;
output   O_BRAM_2_ce0;
input  [15:0] O_BRAM_2_q0;
output  [9:0] O_BRAM_2_address1;
output   O_BRAM_2_ce1;
output   O_BRAM_2_we1;
output  [15:0] O_BRAM_2_d1;
output  [9:0] O_BRAM_3_address0;
output   O_BRAM_3_ce0;
input  [15:0] O_BRAM_3_q0;
output  [9:0] O_BRAM_3_address1;
output   O_BRAM_3_ce1;
output   O_BRAM_3_we1;
output  [15:0] O_BRAM_3_d1;
output  [9:0] O_BRAM_4_address0;
output   O_BRAM_4_ce0;
input  [15:0] O_BRAM_4_q0;
output  [9:0] O_BRAM_4_address1;
output   O_BRAM_4_ce1;
output   O_BRAM_4_we1;
output  [15:0] O_BRAM_4_d1;
output  [9:0] O_BRAM_5_address0;
output   O_BRAM_5_ce0;
input  [15:0] O_BRAM_5_q0;
output  [9:0] O_BRAM_5_address1;
output   O_BRAM_5_ce1;
output   O_BRAM_5_we1;
output  [15:0] O_BRAM_5_d1;
output  [9:0] O_BRAM_6_address0;
output   O_BRAM_6_ce0;
input  [15:0] O_BRAM_6_q0;
output  [9:0] O_BRAM_6_address1;
output   O_BRAM_6_ce1;
output   O_BRAM_6_we1;
output  [15:0] O_BRAM_6_d1;
output  [9:0] O_BRAM_7_address0;
output   O_BRAM_7_ce0;
input  [15:0] O_BRAM_7_q0;
output  [9:0] O_BRAM_7_address1;
output   O_BRAM_7_ce1;
output   O_BRAM_7_we1;
output  [15:0] O_BRAM_7_d1;
output  [9:0] I_BRAM_0_address0;
output   I_BRAM_0_ce0;
input  [15:0] I_BRAM_0_q0;
output  [9:0] I_BRAM_1_address0;
output   I_BRAM_1_ce0;
input  [15:0] I_BRAM_1_q0;
output  [4:0] W_BRAM_0_0_address0;
output   W_BRAM_0_0_ce0;
input  [15:0] W_BRAM_0_0_q0;
output  [4:0] W_BRAM_0_1_address0;
output   W_BRAM_0_1_ce0;
input  [15:0] W_BRAM_0_1_q0;
output  [4:0] W_BRAM_1_0_address0;
output   W_BRAM_1_0_ce0;
input  [15:0] W_BRAM_1_0_q0;
output  [4:0] W_BRAM_1_1_address0;
output   W_BRAM_1_1_ce0;
input  [15:0] W_BRAM_1_1_q0;
output  [4:0] W_BRAM_2_0_address0;
output   W_BRAM_2_0_ce0;
input  [15:0] W_BRAM_2_0_q0;
output  [4:0] W_BRAM_2_1_address0;
output   W_BRAM_2_1_ce0;
input  [15:0] W_BRAM_2_1_q0;
output  [4:0] W_BRAM_3_0_address0;
output   W_BRAM_3_0_ce0;
input  [15:0] W_BRAM_3_0_q0;
output  [4:0] W_BRAM_3_1_address0;
output   W_BRAM_3_1_ce0;
input  [15:0] W_BRAM_3_1_q0;
output  [4:0] W_BRAM_4_0_address0;
output   W_BRAM_4_0_ce0;
input  [15:0] W_BRAM_4_0_q0;
output  [4:0] W_BRAM_4_1_address0;
output   W_BRAM_4_1_ce0;
input  [15:0] W_BRAM_4_1_q0;
output  [4:0] W_BRAM_5_0_address0;
output   W_BRAM_5_0_ce0;
input  [15:0] W_BRAM_5_0_q0;
output  [4:0] W_BRAM_5_1_address0;
output   W_BRAM_5_1_ce0;
input  [15:0] W_BRAM_5_1_q0;
output  [4:0] W_BRAM_6_0_address0;
output   W_BRAM_6_0_ce0;
input  [15:0] W_BRAM_6_0_q0;
output  [4:0] W_BRAM_6_1_address0;
output   W_BRAM_6_1_ce0;
input  [15:0] W_BRAM_6_1_q0;
output  [4:0] W_BRAM_7_0_address0;
output   W_BRAM_7_0_ce0;
input  [15:0] W_BRAM_7_0_q0;
output  [4:0] W_BRAM_7_1_address0;
output   W_BRAM_7_1_ce0;
input  [15:0] W_BRAM_7_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg O_BRAM_0_ce0;
reg O_BRAM_0_ce1;
reg O_BRAM_0_we1;
reg O_BRAM_1_ce0;
reg O_BRAM_1_ce1;
reg O_BRAM_1_we1;
reg O_BRAM_2_ce0;
reg O_BRAM_2_ce1;
reg O_BRAM_2_we1;
reg O_BRAM_3_ce0;
reg O_BRAM_3_ce1;
reg O_BRAM_3_we1;
reg O_BRAM_4_ce0;
reg O_BRAM_4_ce1;
reg O_BRAM_4_we1;
reg O_BRAM_5_ce0;
reg O_BRAM_5_ce1;
reg O_BRAM_5_we1;
reg O_BRAM_6_ce0;
reg O_BRAM_6_ce1;
reg O_BRAM_6_we1;
reg O_BRAM_7_ce0;
reg O_BRAM_7_ce1;
reg O_BRAM_7_we1;
reg I_BRAM_0_ce0;
reg I_BRAM_1_ce0;
reg W_BRAM_0_0_ce0;
reg W_BRAM_0_1_ce0;
reg W_BRAM_1_0_ce0;
reg W_BRAM_1_1_ce0;
reg W_BRAM_2_0_ce0;
reg W_BRAM_2_1_ce0;
reg W_BRAM_3_0_ce0;
reg W_BRAM_3_1_ce0;
reg W_BRAM_4_0_ce0;
reg W_BRAM_4_1_ce0;
reg W_BRAM_5_0_ce0;
reg W_BRAM_5_1_ce0;
reg W_BRAM_6_0_ce0;
reg W_BRAM_6_1_ce0;
reg W_BRAM_7_0_ce0;
reg W_BRAM_7_1_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten3_reg_446;
reg   [12:0] indvar_flatten4_reg_457;
reg   [9:0] indvar_flatten_reg_468;
reg   [2:0] r_reg_479;
reg   [2:0] s_reg_490;
reg   [4:0] te_reg_501;
reg   [4:0] tf_reg_512;
wire   [0:0] exitcond_flatten4_fu_523_p2;
reg   [0:0] exitcond_flatten4_reg_1053;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten4_reg_1053;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten4_reg_1053;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten4_reg_1053;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten4_reg_1053;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten4_reg_1053;
wire   [14:0] indvar_flatten_next4_fu_529_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten_fu_535_p2;
reg   [0:0] exitcond_flatten_reg_1062;
wire   [0:0] not_exitcond_flatten_fu_541_p2;
reg   [0:0] not_exitcond_flatten_reg_1073;
wire   [0:0] exitcond_flatten1_fu_547_p2;
reg   [0:0] exitcond_flatten1_reg_1078;
wire   [0:0] exitcond_flatten_mid_fu_553_p2;
reg   [0:0] exitcond_flatten_mid_reg_1083;
wire   [0:0] tmp_fu_559_p2;
reg   [0:0] tmp_reg_1091;
wire   [9:0] indvar_flatten_next_fu_571_p3;
wire   [12:0] indvar_flatten_next3_fu_585_p3;
wire   [2:0] r_cast1_mid2_fu_652_p3;
reg   [2:0] r_cast1_mid2_reg_1106;
reg    ap_enable_reg_pp0_iter1;
wire   [2:0] s_cast1_mid2_fu_726_p3;
reg   [2:0] s_cast1_mid2_reg_1111;
wire   [4:0] tmp_3_mid2_v_fu_757_p3;
reg   [4:0] tmp_3_mid2_v_reg_1116;
reg   [4:0] ap_reg_pp0_iter2_tmp_3_mid2_v_reg_1116;
wire   [4:0] tf_mid2_fu_803_p3;
reg   [4:0] tf_mid2_reg_1121;
reg   [4:0] ap_reg_pp0_iter2_tf_mid2_reg_1121;
reg   [4:0] ap_reg_pp0_iter3_tf_mid2_reg_1121;
reg   [4:0] ap_reg_pp0_iter4_tf_mid2_reg_1121;
wire   [4:0] tmp_5_mid2_fu_817_p3;
reg   [4:0] tmp_5_mid2_reg_1126;
wire   [4:0] tmp_7_mid2_fu_825_p3;
reg   [4:0] tmp_7_mid2_reg_1132;
reg   [4:0] ap_reg_pp0_iter2_tmp_7_mid2_reg_1132;
reg   [4:0] ap_reg_pp0_iter3_tmp_7_mid2_reg_1132;
reg   [4:0] ap_reg_pp0_iter4_tmp_7_mid2_reg_1132;
wire   [4:0] tmp_8_fu_833_p2;
reg   [4:0] tmp_8_reg_1138;
wire   [4:0] tf_1_fu_839_p2;
wire   [63:0] tmp_3_mid2_fu_880_p1;
reg   [63:0] tmp_3_mid2_reg_1158;
reg  signed [15:0] I_BRAM_0_load_reg_1170;
reg  signed [15:0] ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170;
reg  signed [15:0] I_BRAM_1_load_reg_1182;
wire  signed [15:0] tmp_52_0_1_fu_956_p2;
reg  signed [15:0] tmp_52_0_1_reg_1239;
wire  signed [15:0] tmp_52_1_1_fu_961_p2;
reg  signed [15:0] tmp_52_1_1_reg_1249;
wire  signed [15:0] tmp_52_2_1_fu_966_p2;
reg  signed [15:0] tmp_52_2_1_reg_1259;
wire  signed [15:0] tmp_52_3_1_fu_971_p2;
reg  signed [15:0] tmp_52_3_1_reg_1269;
wire  signed [15:0] tmp_52_4_1_fu_976_p2;
reg  signed [15:0] tmp_52_4_1_reg_1279;
wire  signed [15:0] tmp_52_5_1_fu_981_p2;
reg  signed [15:0] tmp_52_5_1_reg_1289;
wire  signed [15:0] tmp_52_6_1_fu_986_p2;
reg  signed [15:0] tmp_52_6_1_reg_1299;
wire  signed [15:0] tmp_52_7_1_fu_991_p2;
reg  signed [15:0] tmp_52_7_1_reg_1309;
reg   [9:0] O_BRAM_0_addr_reg_1314;
reg   [9:0] O_BRAM_1_addr_reg_1320;
reg   [9:0] O_BRAM_2_addr_reg_1326;
reg   [9:0] O_BRAM_3_addr_reg_1332;
reg   [9:0] O_BRAM_4_addr_reg_1338;
reg   [9:0] O_BRAM_5_addr_reg_1344;
reg   [9:0] O_BRAM_6_addr_reg_1350;
reg   [9:0] O_BRAM_7_addr_reg_1356;
wire  signed [15:0] grp_fu_1005_p3;
reg  signed [15:0] tmp2_reg_1362;
reg    ap_enable_reg_pp0_iter5;
wire  signed [15:0] grp_fu_1011_p3;
reg  signed [15:0] tmp3_reg_1367;
wire  signed [15:0] grp_fu_1017_p3;
reg  signed [15:0] tmp4_reg_1372;
wire  signed [15:0] grp_fu_1023_p3;
reg  signed [15:0] tmp5_reg_1377;
wire  signed [15:0] grp_fu_1029_p3;
reg  signed [15:0] tmp6_reg_1382;
wire  signed [15:0] grp_fu_1035_p3;
reg  signed [15:0] tmp7_reg_1387;
wire  signed [15:0] grp_fu_1041_p3;
reg  signed [15:0] tmp8_reg_1392;
wire  signed [15:0] grp_fu_1047_p3;
reg  signed [15:0] tmp9_reg_1397;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg   [2:0] ap_phi_mux_r_phi_fu_483_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_s_phi_fu_494_p4;
reg   [4:0] ap_phi_mux_te_phi_fu_505_p4;
wire   [63:0] tmp_31_cast_fu_874_p1;
wire   [63:0] tmp_32_cast_fu_897_p1;
wire   [9:0] indvar_flatten_op_fu_565_p2;
wire   [12:0] indvar_flatten33_op_fu_579_p2;
wire   [3:0] r_cast_fu_597_p1;
wire   [3:0] s_cast_fu_609_p1;
wire   [3:0] tmp1_fu_613_p2;
wire   [4:0] tmp1_cast_fu_619_p1;
wire   [4:0] p_shl_fu_601_p3;
wire   [4:0] r_cast1_fu_593_p1;
wire   [2:0] r_1_fu_635_p2;
wire   [4:0] p_shl_mid1_fu_667_p3;
wire   [4:0] r_cast1_mid1_fu_648_p1;
wire   [4:0] tmp_mid_fu_682_p2;
wire   [4:0] tmp_s_fu_623_p2;
wire   [4:0] tmp_4_fu_629_p2;
wire   [0:0] exitcond_fu_702_p2;
wire   [2:0] s_mid_fu_641_p3;
wire   [2:0] s_1_fu_713_p2;
wire   [3:0] s_cast_mid1_fu_737_p1;
wire   [3:0] r_cast_mid2_cast_fu_663_p1;
wire   [3:0] tmp1_mid1_fu_741_p2;
wire   [4:0] p_shl_mid2_fu_675_p3;
wire   [4:0] tmp1_cast_mid1_fu_747_p1;
wire   [4:0] tmp_mid1_fu_751_p2;
wire   [4:0] tmp_3_mid256_v_fu_688_p3;
wire   [4:0] r_cast1_mid2_cast_fu_659_p1;
wire   [4:0] tmp_5_mid3_fu_695_p3;
wire   [0:0] exitcond_flatten_not_fu_771_p2;
wire   [0:0] exitcond3_mid_fu_708_p2;
wire   [0:0] not_exitcond_flatten_1_fu_776_p2;
wire   [4:0] te_mid_fu_719_p3;
wire   [0:0] exitcond3_mid1_fu_781_p2;
wire   [0:0] tmp_13_fu_793_p2;
wire   [0:0] tmp_33_fu_798_p2;
wire   [4:0] te_1_fu_787_p2;
wire   [4:0] tmp_4_mid1_fu_811_p2;
wire   [4:0] tmp_5_mid5_fu_764_p3;
wire   [4:0] s_cast1_mid2_cast_fu_733_p1;
wire   [9:0] tmp_34_fu_848_p3;
wire   [10:0] p_shl2_cast_fu_855_p1;
wire   [10:0] tmp_5_mid2_cast_fu_845_p1;
wire   [10:0] tmp_14_fu_859_p2;
wire   [10:0] tmp_9_cast_fu_865_p1;
wire   [10:0] tmp_16_fu_868_p2;
wire   [9:0] grp_fu_996_p3;
wire   [4:0] grp_fu_996_p0;
wire   [5:0] grp_fu_996_p1;
wire   [4:0] grp_fu_996_p2;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_996_p00;
wire   [9:0] grp_fu_996_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U25(
    .din0(W_BRAM_0_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_0_1_fu_956_p2)
);

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U26(
    .din0(W_BRAM_1_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_1_1_fu_961_p2)
);

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U27(
    .din0(W_BRAM_2_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_2_1_fu_966_p2)
);

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U28(
    .din0(W_BRAM_3_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_3_1_fu_971_p2)
);

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U29(
    .din0(W_BRAM_4_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_4_1_fu_976_p2)
);

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U30(
    .din0(W_BRAM_5_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_5_1_fu_981_p2)
);

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U31(
    .din0(W_BRAM_6_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_6_1_fu_986_p2)
);

HLS2x8_2_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mul_mul_bkb_U32(
    .din0(W_BRAM_7_1_q0),
    .din1(I_BRAM_1_load_reg_1182),
    .dout(tmp_52_7_1_fu_991_p2)
);

HLS2x8_2_mac_mulacud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
HLS2x8_2_mac_mulacud_U33(
    .din0(grp_fu_996_p0),
    .din1(grp_fu_996_p1),
    .din2(grp_fu_996_p2),
    .dout(grp_fu_996_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U34(
    .din0(W_BRAM_0_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_0_1_reg_1239),
    .dout(grp_fu_1005_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U35(
    .din0(W_BRAM_1_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_1_1_reg_1249),
    .dout(grp_fu_1011_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U36(
    .din0(W_BRAM_2_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_2_1_reg_1259),
    .dout(grp_fu_1017_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U37(
    .din0(W_BRAM_3_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_3_1_reg_1269),
    .dout(grp_fu_1023_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U38(
    .din0(W_BRAM_4_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_4_1_reg_1279),
    .dout(grp_fu_1029_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U39(
    .din0(W_BRAM_5_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_5_1_reg_1289),
    .dout(grp_fu_1035_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U40(
    .din0(W_BRAM_6_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_6_1_reg_1299),
    .dout(grp_fu_1041_p3)
);

HLS2x8_2_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mac_muladEe_U41(
    .din0(W_BRAM_7_0_q0),
    .din1(ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170),
    .din2(tmp_52_7_1_reg_1309),
    .dout(grp_fu_1047_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten4_fu_523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_523_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten3_reg_446 <= indvar_flatten_next4_fu_529_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_446 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_523_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten4_reg_457 <= indvar_flatten_next3_fu_585_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten4_reg_457 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_523_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_468 <= indvar_flatten_next_fu_571_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_468 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_reg_479 <= r_cast1_mid2_reg_1106;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_479 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_reg_490 <= s_cast1_mid2_reg_1111;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_reg_490 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        te_reg_501 <= tmp_7_mid2_reg_1132;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        te_reg_501 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1053 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tf_reg_512 <= tf_1_fu_839_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tf_reg_512 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_BRAM_0_load_reg_1170 <= I_BRAM_0_q0;
        I_BRAM_1_load_reg_1182 <= I_BRAM_1_q0;
        tmp_3_mid2_reg_1158[4 : 0] <= tmp_3_mid2_fu_880_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter4_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_0_addr_reg_1314 <= tmp_32_cast_fu_897_p1;
        O_BRAM_1_addr_reg_1320 <= tmp_32_cast_fu_897_p1;
        O_BRAM_2_addr_reg_1326 <= tmp_32_cast_fu_897_p1;
        O_BRAM_3_addr_reg_1332 <= tmp_32_cast_fu_897_p1;
        O_BRAM_4_addr_reg_1338 <= tmp_32_cast_fu_897_p1;
        O_BRAM_5_addr_reg_1344 <= tmp_32_cast_fu_897_p1;
        O_BRAM_6_addr_reg_1350 <= tmp_32_cast_fu_897_p1;
        O_BRAM_7_addr_reg_1356 <= tmp_32_cast_fu_897_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten4_reg_1053 <= exitcond_flatten4_reg_1053;
        exitcond_flatten4_reg_1053 <= exitcond_flatten4_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_flatten4_reg_1053 <= ap_reg_pp0_iter1_exitcond_flatten4_reg_1053;
        ap_reg_pp0_iter2_tf_mid2_reg_1121 <= tf_mid2_reg_1121;
        ap_reg_pp0_iter2_tmp_3_mid2_v_reg_1116 <= tmp_3_mid2_v_reg_1116;
        ap_reg_pp0_iter2_tmp_7_mid2_reg_1132 <= tmp_7_mid2_reg_1132;
        ap_reg_pp0_iter3_exitcond_flatten4_reg_1053 <= ap_reg_pp0_iter2_exitcond_flatten4_reg_1053;
        ap_reg_pp0_iter3_tf_mid2_reg_1121 <= ap_reg_pp0_iter2_tf_mid2_reg_1121;
        ap_reg_pp0_iter3_tmp_7_mid2_reg_1132 <= ap_reg_pp0_iter2_tmp_7_mid2_reg_1132;
        ap_reg_pp0_iter4_I_BRAM_0_load_reg_1170 <= I_BRAM_0_load_reg_1170;
        ap_reg_pp0_iter4_exitcond_flatten4_reg_1053 <= ap_reg_pp0_iter3_exitcond_flatten4_reg_1053;
        ap_reg_pp0_iter4_tf_mid2_reg_1121 <= ap_reg_pp0_iter3_tf_mid2_reg_1121;
        ap_reg_pp0_iter4_tmp_7_mid2_reg_1132 <= ap_reg_pp0_iter3_tmp_7_mid2_reg_1132;
        ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 <= ap_reg_pp0_iter4_exitcond_flatten4_reg_1053;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_523_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_1078 <= exitcond_flatten1_fu_547_p2;
        exitcond_flatten_mid_reg_1083 <= exitcond_flatten_mid_fu_553_p2;
        exitcond_flatten_reg_1062 <= exitcond_flatten_fu_535_p2;
        not_exitcond_flatten_reg_1073 <= not_exitcond_flatten_fu_541_p2;
        tmp_reg_1091 <= tmp_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1053 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_cast1_mid2_reg_1106 <= r_cast1_mid2_fu_652_p3;
        s_cast1_mid2_reg_1111 <= s_cast1_mid2_fu_726_p3;
        tmp_7_mid2_reg_1132 <= tmp_7_mid2_fu_825_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1053 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tf_mid2_reg_1121 <= tf_mid2_fu_803_p3;
        tmp_3_mid2_v_reg_1116 <= tmp_3_mid2_v_fu_757_p3;
        tmp_5_mid2_reg_1126 <= tmp_5_mid2_fu_817_p3;
        tmp_8_reg_1138 <= tmp_8_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter4_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        tmp2_reg_1362 <= grp_fu_1005_p3;
        tmp3_reg_1367 <= grp_fu_1011_p3;
        tmp4_reg_1372 <= grp_fu_1017_p3;
        tmp5_reg_1377 <= grp_fu_1023_p3;
        tmp6_reg_1382 <= grp_fu_1029_p3;
        tmp7_reg_1387 <= grp_fu_1035_p3;
        tmp8_reg_1392 <= grp_fu_1041_p3;
        tmp9_reg_1397 <= grp_fu_1047_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_52_0_1_reg_1239 <= tmp_52_0_1_fu_956_p2;
        tmp_52_1_1_reg_1249 <= tmp_52_1_1_fu_961_p2;
        tmp_52_2_1_reg_1259 <= tmp_52_2_1_fu_966_p2;
        tmp_52_3_1_reg_1269 <= tmp_52_3_1_fu_971_p2;
        tmp_52_4_1_reg_1279 <= tmp_52_4_1_fu_976_p2;
        tmp_52_5_1_reg_1289 <= tmp_52_5_1_fu_981_p2;
        tmp_52_6_1_reg_1299 <= tmp_52_6_1_fu_986_p2;
        tmp_52_7_1_reg_1309 <= tmp_52_7_1_fu_991_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_0_ce0 = 1'b1;
    end else begin
        I_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        I_BRAM_1_ce0 = 1'b1;
    end else begin
        I_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_0_ce0 = 1'b1;
    end else begin
        O_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_0_ce1 = 1'b1;
    end else begin
        O_BRAM_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_0_we1 = 1'b1;
    end else begin
        O_BRAM_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_1_ce0 = 1'b1;
    end else begin
        O_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_1_ce1 = 1'b1;
    end else begin
        O_BRAM_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_1_we1 = 1'b1;
    end else begin
        O_BRAM_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_2_ce0 = 1'b1;
    end else begin
        O_BRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_2_ce1 = 1'b1;
    end else begin
        O_BRAM_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_2_we1 = 1'b1;
    end else begin
        O_BRAM_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_3_ce0 = 1'b1;
    end else begin
        O_BRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_3_ce1 = 1'b1;
    end else begin
        O_BRAM_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_3_we1 = 1'b1;
    end else begin
        O_BRAM_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_4_ce0 = 1'b1;
    end else begin
        O_BRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_4_ce1 = 1'b1;
    end else begin
        O_BRAM_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_4_we1 = 1'b1;
    end else begin
        O_BRAM_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_5_ce0 = 1'b1;
    end else begin
        O_BRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_5_ce1 = 1'b1;
    end else begin
        O_BRAM_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_5_we1 = 1'b1;
    end else begin
        O_BRAM_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_6_ce0 = 1'b1;
    end else begin
        O_BRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_6_ce1 = 1'b1;
    end else begin
        O_BRAM_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_6_we1 = 1'b1;
    end else begin
        O_BRAM_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        O_BRAM_7_ce0 = 1'b1;
    end else begin
        O_BRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_7_ce1 = 1'b1;
    end else begin
        O_BRAM_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten4_reg_1053 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        O_BRAM_7_we1 = 1'b1;
    end else begin
        O_BRAM_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_0_0_ce0 = 1'b1;
    end else begin
        W_BRAM_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_0_1_ce0 = 1'b1;
    end else begin
        W_BRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_1_0_ce0 = 1'b1;
    end else begin
        W_BRAM_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_1_1_ce0 = 1'b1;
    end else begin
        W_BRAM_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_2_0_ce0 = 1'b1;
    end else begin
        W_BRAM_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_2_1_ce0 = 1'b1;
    end else begin
        W_BRAM_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_3_0_ce0 = 1'b1;
    end else begin
        W_BRAM_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_3_1_ce0 = 1'b1;
    end else begin
        W_BRAM_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_4_0_ce0 = 1'b1;
    end else begin
        W_BRAM_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_4_1_ce0 = 1'b1;
    end else begin
        W_BRAM_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_5_0_ce0 = 1'b1;
    end else begin
        W_BRAM_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_5_1_ce0 = 1'b1;
    end else begin
        W_BRAM_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_6_0_ce0 = 1'b1;
    end else begin
        W_BRAM_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_6_1_ce0 = 1'b1;
    end else begin
        W_BRAM_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W_BRAM_7_0_ce0 = 1'b1;
    end else begin
        W_BRAM_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        W_BRAM_7_1_ce0 = 1'b1;
    end else begin
        W_BRAM_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1053 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_r_phi_fu_483_p4 = r_cast1_mid2_reg_1106;
    end else begin
        ap_phi_mux_r_phi_fu_483_p4 = r_reg_479;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1053 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_s_phi_fu_494_p4 = s_cast1_mid2_reg_1111;
    end else begin
        ap_phi_mux_s_phi_fu_494_p4 = s_reg_490;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_flatten4_reg_1053 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_te_phi_fu_505_p4 = tmp_7_mid2_reg_1132;
    end else begin
        ap_phi_mux_te_phi_fu_505_p4 = te_reg_501;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_BRAM_0_address0 = tmp_31_cast_fu_874_p1;

assign I_BRAM_1_address0 = tmp_31_cast_fu_874_p1;

assign O_BRAM_0_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_0_address1 = O_BRAM_0_addr_reg_1314;

assign O_BRAM_0_d1 = ($signed(O_BRAM_0_q0) + $signed(tmp2_reg_1362));

assign O_BRAM_1_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_1_address1 = O_BRAM_1_addr_reg_1320;

assign O_BRAM_1_d1 = ($signed(O_BRAM_1_q0) + $signed(tmp3_reg_1367));

assign O_BRAM_2_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_2_address1 = O_BRAM_2_addr_reg_1326;

assign O_BRAM_2_d1 = ($signed(O_BRAM_2_q0) + $signed(tmp4_reg_1372));

assign O_BRAM_3_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_3_address1 = O_BRAM_3_addr_reg_1332;

assign O_BRAM_3_d1 = ($signed(O_BRAM_3_q0) + $signed(tmp5_reg_1377));

assign O_BRAM_4_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_4_address1 = O_BRAM_4_addr_reg_1338;

assign O_BRAM_4_d1 = ($signed(O_BRAM_4_q0) + $signed(tmp6_reg_1382));

assign O_BRAM_5_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_5_address1 = O_BRAM_5_addr_reg_1344;

assign O_BRAM_5_d1 = ($signed(O_BRAM_5_q0) + $signed(tmp7_reg_1387));

assign O_BRAM_6_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_6_address1 = O_BRAM_6_addr_reg_1350;

assign O_BRAM_6_d1 = ($signed(O_BRAM_6_q0) + $signed(tmp8_reg_1392));

assign O_BRAM_7_address0 = tmp_32_cast_fu_897_p1;

assign O_BRAM_7_address1 = O_BRAM_7_addr_reg_1356;

assign O_BRAM_7_d1 = ($signed(O_BRAM_7_q0) + $signed(tmp9_reg_1397));

assign W_BRAM_0_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_0_1_address0 = tmp_3_mid2_fu_880_p1;

assign W_BRAM_1_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_1_1_address0 = tmp_3_mid2_fu_880_p1;

assign W_BRAM_2_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_2_1_address0 = tmp_3_mid2_fu_880_p1;

assign W_BRAM_3_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_3_1_address0 = tmp_3_mid2_fu_880_p1;

assign W_BRAM_4_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_4_1_address0 = tmp_3_mid2_fu_880_p1;

assign W_BRAM_5_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_5_1_address0 = tmp_3_mid2_fu_880_p1;

assign W_BRAM_6_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_6_1_address0 = tmp_3_mid2_fu_880_p1;

assign W_BRAM_7_0_address0 = tmp_3_mid2_reg_1158;

assign W_BRAM_7_1_address0 = tmp_3_mid2_fu_880_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond3_mid1_fu_781_p2 = (not_exitcond_flatten_1_fu_776_p2 & exitcond3_mid_fu_708_p2);

assign exitcond3_mid_fu_708_p2 = (not_exitcond_flatten_reg_1073 & exitcond_fu_702_p2);

assign exitcond_flatten1_fu_547_p2 = ((indvar_flatten_reg_468 == 10'd729) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_523_p2 = ((indvar_flatten3_reg_446 == 15'd18225) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_535_p2 = ((indvar_flatten4_reg_457 == 13'd3645) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_553_p2 = (not_exitcond_flatten_fu_541_p2 & exitcond_flatten1_fu_547_p2);

assign exitcond_flatten_not_fu_771_p2 = (exitcond_flatten1_reg_1078 ^ 1'd1);

assign exitcond_fu_702_p2 = ((tf_reg_512 == 5'd27) ? 1'b1 : 1'b0);

assign grp_fu_996_p0 = grp_fu_996_p00;

assign grp_fu_996_p00 = ap_reg_pp0_iter4_tmp_7_mid2_reg_1132;

assign grp_fu_996_p1 = 10'd27;

assign grp_fu_996_p2 = grp_fu_996_p20;

assign grp_fu_996_p20 = ap_reg_pp0_iter4_tf_mid2_reg_1121;

assign indvar_flatten33_op_fu_579_p2 = (indvar_flatten4_reg_457 + 13'd1);

assign indvar_flatten_next3_fu_585_p3 = ((exitcond_flatten_fu_535_p2[0:0] === 1'b1) ? 13'd1 : indvar_flatten33_op_fu_579_p2);

assign indvar_flatten_next4_fu_529_p2 = (indvar_flatten3_reg_446 + 15'd1);

assign indvar_flatten_next_fu_571_p3 = ((tmp_fu_559_p2[0:0] === 1'b1) ? 10'd1 : indvar_flatten_op_fu_565_p2);

assign indvar_flatten_op_fu_565_p2 = (indvar_flatten_reg_468 + 10'd1);

assign not_exitcond_flatten_1_fu_776_p2 = (exitcond_flatten_reg_1062 | exitcond_flatten_not_fu_771_p2);

assign not_exitcond_flatten_fu_541_p2 = (exitcond_flatten_fu_535_p2 ^ 1'd1);

assign p_shl2_cast_fu_855_p1 = tmp_34_fu_848_p3;

assign p_shl_fu_601_p3 = {{ap_phi_mux_r_phi_fu_483_p4}, {2'd0}};

assign p_shl_mid1_fu_667_p3 = {{r_1_fu_635_p2}, {2'd0}};

assign p_shl_mid2_fu_675_p3 = ((exitcond_flatten_reg_1062[0:0] === 1'b1) ? p_shl_mid1_fu_667_p3 : p_shl_fu_601_p3);

assign r_1_fu_635_p2 = (ap_phi_mux_r_phi_fu_483_p4 + 3'd1);

assign r_cast1_fu_593_p1 = ap_phi_mux_r_phi_fu_483_p4;

assign r_cast1_mid1_fu_648_p1 = r_1_fu_635_p2;

assign r_cast1_mid2_cast_fu_659_p1 = r_cast1_mid2_fu_652_p3;

assign r_cast1_mid2_fu_652_p3 = ((exitcond_flatten_reg_1062[0:0] === 1'b1) ? r_1_fu_635_p2 : ap_phi_mux_r_phi_fu_483_p4);

assign r_cast_fu_597_p1 = ap_phi_mux_r_phi_fu_483_p4;

assign r_cast_mid2_cast_fu_663_p1 = r_cast1_mid2_fu_652_p3;

assign s_1_fu_713_p2 = (s_mid_fu_641_p3 + 3'd1);

assign s_cast1_mid2_cast_fu_733_p1 = s_cast1_mid2_fu_726_p3;

assign s_cast1_mid2_fu_726_p3 = ((exitcond_flatten_mid_reg_1083[0:0] === 1'b1) ? s_1_fu_713_p2 : s_mid_fu_641_p3);

assign s_cast_fu_609_p1 = ap_phi_mux_s_phi_fu_494_p4;

assign s_cast_mid1_fu_737_p1 = s_1_fu_713_p2;

assign s_mid_fu_641_p3 = ((exitcond_flatten_reg_1062[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_s_phi_fu_494_p4);

assign te_1_fu_787_p2 = (te_mid_fu_719_p3 + 5'd1);

assign te_mid_fu_719_p3 = ((tmp_reg_1091[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_te_phi_fu_505_p4);

assign tf_1_fu_839_p2 = (tf_mid2_fu_803_p3 + 5'd1);

assign tf_mid2_fu_803_p3 = ((tmp_33_fu_798_p2[0:0] === 1'b1) ? 5'd0 : tf_reg_512);

assign tmp1_cast_fu_619_p1 = tmp1_fu_613_p2;

assign tmp1_cast_mid1_fu_747_p1 = tmp1_mid1_fu_741_p2;

assign tmp1_fu_613_p2 = (r_cast_fu_597_p1 + s_cast_fu_609_p1);

assign tmp1_mid1_fu_741_p2 = (s_cast_mid1_fu_737_p1 + r_cast_mid2_cast_fu_663_p1);

assign tmp_13_fu_793_p2 = (exitcond_flatten_mid_reg_1083 | exitcond3_mid1_fu_781_p2);

assign tmp_14_fu_859_p2 = (p_shl2_cast_fu_855_p1 - tmp_5_mid2_cast_fu_845_p1);

assign tmp_16_fu_868_p2 = (tmp_14_fu_859_p2 + tmp_9_cast_fu_865_p1);

assign tmp_31_cast_fu_874_p1 = tmp_16_fu_868_p2;

assign tmp_32_cast_fu_897_p1 = grp_fu_996_p3;

assign tmp_33_fu_798_p2 = (tmp_13_fu_793_p2 | exitcond_flatten_reg_1062);

assign tmp_34_fu_848_p3 = {{tmp_5_mid2_reg_1126}, {5'd0}};

assign tmp_3_mid256_v_fu_688_p3 = ((exitcond_flatten_reg_1062[0:0] === 1'b1) ? tmp_mid_fu_682_p2 : tmp_s_fu_623_p2);

assign tmp_3_mid2_fu_880_p1 = ap_reg_pp0_iter2_tmp_3_mid2_v_reg_1116;

assign tmp_3_mid2_v_fu_757_p3 = ((exitcond_flatten_mid_reg_1083[0:0] === 1'b1) ? tmp_mid1_fu_751_p2 : tmp_3_mid256_v_fu_688_p3);

assign tmp_4_fu_629_p2 = (r_cast1_fu_593_p1 + ap_phi_mux_te_phi_fu_505_p4);

assign tmp_4_mid1_fu_811_p2 = (te_1_fu_787_p2 + r_cast1_mid2_cast_fu_659_p1);

assign tmp_5_mid2_cast_fu_845_p1 = tmp_5_mid2_reg_1126;

assign tmp_5_mid2_fu_817_p3 = ((exitcond3_mid1_fu_781_p2[0:0] === 1'b1) ? tmp_4_mid1_fu_811_p2 : tmp_5_mid5_fu_764_p3);

assign tmp_5_mid3_fu_695_p3 = ((exitcond_flatten_reg_1062[0:0] === 1'b1) ? r_cast1_mid1_fu_648_p1 : tmp_4_fu_629_p2);

assign tmp_5_mid5_fu_764_p3 = ((exitcond_flatten_mid_reg_1083[0:0] === 1'b1) ? r_cast1_mid2_cast_fu_659_p1 : tmp_5_mid3_fu_695_p3);

assign tmp_7_mid2_fu_825_p3 = ((exitcond3_mid1_fu_781_p2[0:0] === 1'b1) ? te_1_fu_787_p2 : te_mid_fu_719_p3);

assign tmp_8_fu_833_p2 = (tf_mid2_fu_803_p3 + s_cast1_mid2_cast_fu_733_p1);

assign tmp_9_cast_fu_865_p1 = tmp_8_reg_1138;

assign tmp_fu_559_p2 = (exitcond_flatten_mid_fu_553_p2 | exitcond_flatten_fu_535_p2);

assign tmp_mid1_fu_751_p2 = (p_shl_mid2_fu_675_p3 + tmp1_cast_mid1_fu_747_p1);

assign tmp_mid_fu_682_p2 = (p_shl_mid1_fu_667_p3 + r_cast1_mid1_fu_648_p1);

assign tmp_s_fu_623_p2 = (tmp1_cast_fu_619_p1 + p_shl_fu_601_p3);

always @ (posedge ap_clk) begin
    tmp_3_mid2_reg_1158[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //computation
