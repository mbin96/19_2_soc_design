// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_transfer_ofo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ofmap_TDATA,
        ofmap_TVALID,
        ofmap_TREADY,
        O_BRAM_0_address0,
        O_BRAM_0_ce0,
        O_BRAM_0_q0,
        O_BRAM_0_address1,
        O_BRAM_0_ce1,
        O_BRAM_0_we1,
        O_BRAM_0_d1,
        O_BRAM_1_address0,
        O_BRAM_1_ce0,
        O_BRAM_1_q0,
        O_BRAM_1_address1,
        O_BRAM_1_ce1,
        O_BRAM_1_we1,
        O_BRAM_1_d1,
        O_BRAM_2_address0,
        O_BRAM_2_ce0,
        O_BRAM_2_q0,
        O_BRAM_2_address1,
        O_BRAM_2_ce1,
        O_BRAM_2_we1,
        O_BRAM_2_d1,
        O_BRAM_3_address0,
        O_BRAM_3_ce0,
        O_BRAM_3_q0,
        O_BRAM_3_address1,
        O_BRAM_3_ce1,
        O_BRAM_3_we1,
        O_BRAM_3_d1,
        O_BRAM_4_address0,
        O_BRAM_4_ce0,
        O_BRAM_4_q0,
        O_BRAM_4_address1,
        O_BRAM_4_ce1,
        O_BRAM_4_we1,
        O_BRAM_4_d1,
        O_BRAM_5_address0,
        O_BRAM_5_ce0,
        O_BRAM_5_q0,
        O_BRAM_5_address1,
        O_BRAM_5_ce1,
        O_BRAM_5_we1,
        O_BRAM_5_d1,
        O_BRAM_6_address0,
        O_BRAM_6_ce0,
        O_BRAM_6_q0,
        O_BRAM_6_address1,
        O_BRAM_6_ce1,
        O_BRAM_6_we1,
        O_BRAM_6_d1,
        O_BRAM_7_address0,
        O_BRAM_7_ce0,
        O_BRAM_7_q0,
        O_BRAM_7_address1,
        O_BRAM_7_ce1,
        O_BRAM_7_we1,
        O_BRAM_7_d1,
        m,
        f
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] ofmap_TDATA;
output   ofmap_TVALID;
input   ofmap_TREADY;
output  [9:0] O_BRAM_0_address0;
output   O_BRAM_0_ce0;
input  [15:0] O_BRAM_0_q0;
output  [9:0] O_BRAM_0_address1;
output   O_BRAM_0_ce1;
output   O_BRAM_0_we1;
output  [15:0] O_BRAM_0_d1;
output  [9:0] O_BRAM_1_address0;
output   O_BRAM_1_ce0;
input  [15:0] O_BRAM_1_q0;
output  [9:0] O_BRAM_1_address1;
output   O_BRAM_1_ce1;
output   O_BRAM_1_we1;
output  [15:0] O_BRAM_1_d1;
output  [9:0] O_BRAM_2_address0;
output   O_BRAM_2_ce0;
input  [15:0] O_BRAM_2_q0;
output  [9:0] O_BRAM_2_address1;
output   O_BRAM_2_ce1;
output   O_BRAM_2_we1;
output  [15:0] O_BRAM_2_d1;
output  [9:0] O_BRAM_3_address0;
output   O_BRAM_3_ce0;
input  [15:0] O_BRAM_3_q0;
output  [9:0] O_BRAM_3_address1;
output   O_BRAM_3_ce1;
output   O_BRAM_3_we1;
output  [15:0] O_BRAM_3_d1;
output  [9:0] O_BRAM_4_address0;
output   O_BRAM_4_ce0;
input  [15:0] O_BRAM_4_q0;
output  [9:0] O_BRAM_4_address1;
output   O_BRAM_4_ce1;
output   O_BRAM_4_we1;
output  [15:0] O_BRAM_4_d1;
output  [9:0] O_BRAM_5_address0;
output   O_BRAM_5_ce0;
input  [15:0] O_BRAM_5_q0;
output  [9:0] O_BRAM_5_address1;
output   O_BRAM_5_ce1;
output   O_BRAM_5_we1;
output  [15:0] O_BRAM_5_d1;
output  [9:0] O_BRAM_6_address0;
output   O_BRAM_6_ce0;
input  [15:0] O_BRAM_6_q0;
output  [9:0] O_BRAM_6_address1;
output   O_BRAM_6_ce1;
output   O_BRAM_6_we1;
output  [15:0] O_BRAM_6_d1;
output  [9:0] O_BRAM_7_address0;
output   O_BRAM_7_ce0;
input  [15:0] O_BRAM_7_q0;
output  [9:0] O_BRAM_7_address1;
output   O_BRAM_7_ce1;
output   O_BRAM_7_we1;
output  [15:0] O_BRAM_7_d1;
input  [7:0] m;
input  [3:0] f;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ofmap_TVALID;
reg O_BRAM_0_ce0;
reg O_BRAM_0_ce1;
reg O_BRAM_0_we1;
reg O_BRAM_1_ce0;
reg O_BRAM_1_ce1;
reg O_BRAM_1_we1;
reg O_BRAM_2_ce0;
reg O_BRAM_2_ce1;
reg O_BRAM_2_we1;
reg O_BRAM_3_ce0;
reg O_BRAM_3_ce1;
reg O_BRAM_3_we1;
reg O_BRAM_4_ce0;
reg O_BRAM_4_ce1;
reg O_BRAM_4_we1;
reg O_BRAM_5_ce0;
reg O_BRAM_5_ce1;
reg O_BRAM_5_we1;
reg O_BRAM_6_ce0;
reg O_BRAM_6_ce1;
reg O_BRAM_6_we1;
reg O_BRAM_7_ce0;
reg O_BRAM_7_ce1;
reg O_BRAM_7_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ofmap_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_462;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_462;
reg   [36:0] indvar_flatten_reg_229;
reg   [4:0] j_reg_240;
reg   [31:0] k_reg_251;
wire  signed [4:0] f_cast2_fu_260_p1;
reg  signed [4:0] f_cast2_reg_425;
wire   [5:0] tmp_1_fu_272_p2;
reg   [5:0] tmp_1_reg_431;
wire   [6:0] tmp_5_fu_296_p2;
reg   [6:0] tmp_5_reg_436;
wire   [31:0] f_cast1_fu_302_p1;
reg   [31:0] f_cast1_reg_441;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_1_cast_fu_305_p1;
reg   [31:0] tmp_1_cast_reg_447;
wire   [2:0] tmp_2_fu_308_p1;
reg   [2:0] tmp_2_reg_452;
wire   [36:0] bound_fu_319_p2;
reg   [36:0] bound_reg_457;
wire   [0:0] exitcond_flatten_fu_325_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_sig_ioackin_ofmap_TREADY;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [36:0] indvar_flatten_next_fu_330_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_7_mid2_v_fu_354_p3;
reg   [4:0] tmp_7_mid2_v_reg_471;
(* use_dsp48 = "no" *) wire   [10:0] tmp_10_fu_369_p2;
reg   [10:0] tmp_10_reg_477;
wire   [31:0] k_1_fu_375_p2;
reg   [9:0] O_BRAM_0_addr_reg_487;
reg   [9:0] O_BRAM_1_addr_reg_493;
reg   [9:0] O_BRAM_2_addr_reg_499;
reg   [9:0] O_BRAM_3_addr_reg_505;
reg   [9:0] O_BRAM_4_addr_reg_511;
reg   [9:0] O_BRAM_5_addr_reg_517;
reg   [9:0] O_BRAM_6_addr_reg_523;
reg   [9:0] O_BRAM_7_addr_reg_529;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [4:0] ap_phi_mux_j_phi_fu_244_p4;
wire  signed [63:0] tmp_7_cast_fu_384_p1;
wire   [15:0] tmp_3_fu_395_p10;
wire    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_ofmap_TREADY;
wire   [5:0] f_cast1_cast1_fu_264_p1;
wire   [0:0] tmp_4_fu_278_p2;
wire   [5:0] smax1_fu_284_p3;
wire   [6:0] smax1_cast_fu_292_p1;
wire   [6:0] f_cast1_cast_fu_268_p1;
wire  signed [31:0] tmp_5_cast_fu_312_p1;
wire   [31:0] bound_fu_319_p1;
wire   [0:0] tmp_s_fu_342_p2;
wire   [4:0] j_1_fu_336_p2;
wire   [31:0] k_mid2_fu_347_p3;
wire   [10:0] tmp_8_fu_362_p1;
wire   [10:0] tmp_9_fu_366_p1;
wire   [10:0] grp_fu_417_p3;
wire   [5:0] grp_fu_417_p0;
wire   [4:0] grp_fu_417_p1;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [36:0] bound_fu_319_p10;
wire   [10:0] grp_fu_417_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_ofmap_TREADY = 1'b0;
end

HLS2x8_2_mux_83_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
HLS2x8_2_mux_83_1eOg_U71(
    .din0(O_BRAM_0_q0),
    .din1(O_BRAM_1_q0),
    .din2(O_BRAM_2_q0),
    .din3(O_BRAM_3_q0),
    .din4(O_BRAM_4_q0),
    .din5(O_BRAM_5_q0),
    .din6(O_BRAM_6_q0),
    .din7(O_BRAM_7_q0),
    .din8(tmp_2_reg_452),
    .dout(tmp_3_fu_395_p10)
);

HLS2x8_2_mac_mulafYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
HLS2x8_2_mac_mulafYi_U72(
    .din0(grp_fu_417_p0),
    .din1(grp_fu_417_p1),
    .din2(tmp_10_reg_477),
    .dout(grp_fu_417_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_ofmap_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_flatten_reg_462 == 1'd0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_ofmap_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ofmap_TREADY == 1'b1))) begin
                ap_reg_ioackin_ofmap_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_325_p2 == 1'd0))) begin
        indvar_flatten_reg_229 <= indvar_flatten_next_fu_330_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_229 <= 37'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_462 == 1'd0))) begin
        j_reg_240 <= tmp_7_mid2_v_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_240 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_325_p2 == 1'd0))) begin
        k_reg_251 <= k_1_fu_375_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_251 <= f_cast1_fu_302_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_462 == 1'd0))) begin
        O_BRAM_0_addr_reg_487 <= tmp_7_cast_fu_384_p1;
        O_BRAM_1_addr_reg_493 <= tmp_7_cast_fu_384_p1;
        O_BRAM_2_addr_reg_499 <= tmp_7_cast_fu_384_p1;
        O_BRAM_3_addr_reg_505 <= tmp_7_cast_fu_384_p1;
        O_BRAM_4_addr_reg_511 <= tmp_7_cast_fu_384_p1;
        O_BRAM_5_addr_reg_517 <= tmp_7_cast_fu_384_p1;
        O_BRAM_6_addr_reg_523 <= tmp_7_cast_fu_384_p1;
        O_BRAM_7_addr_reg_529 <= tmp_7_cast_fu_384_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_462 <= exitcond_flatten_reg_462;
        exitcond_flatten_reg_462 <= exitcond_flatten_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_457 <= bound_fu_319_p2;
        f_cast1_reg_441[4 : 0] <= f_cast1_fu_302_p1[4 : 0];
        tmp_1_cast_reg_447[5 : 0] <= tmp_1_cast_fu_305_p1[5 : 0];
        tmp_2_reg_452 <= tmp_2_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_cast2_reg_425 <= f_cast2_fu_260_p1;
        tmp_1_reg_431 <= tmp_1_fu_272_p2;
        tmp_5_reg_436 <= tmp_5_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_325_p2 == 1'd0))) begin
        tmp_10_reg_477 <= tmp_10_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_325_p2 == 1'd0))) begin
        tmp_7_mid2_v_reg_471 <= tmp_7_mid2_v_fu_354_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_0_ce0 = 1'b1;
    end else begin
        O_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_0_ce1 = 1'b1;
    end else begin
        O_BRAM_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd0))) begin
        O_BRAM_0_we1 = 1'b1;
    end else begin
        O_BRAM_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_1_ce0 = 1'b1;
    end else begin
        O_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_1_ce1 = 1'b1;
    end else begin
        O_BRAM_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd1))) begin
        O_BRAM_1_we1 = 1'b1;
    end else begin
        O_BRAM_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_2_ce0 = 1'b1;
    end else begin
        O_BRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_2_ce1 = 1'b1;
    end else begin
        O_BRAM_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd2))) begin
        O_BRAM_2_we1 = 1'b1;
    end else begin
        O_BRAM_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_3_ce0 = 1'b1;
    end else begin
        O_BRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_3_ce1 = 1'b1;
    end else begin
        O_BRAM_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd3))) begin
        O_BRAM_3_we1 = 1'b1;
    end else begin
        O_BRAM_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_4_ce0 = 1'b1;
    end else begin
        O_BRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_4_ce1 = 1'b1;
    end else begin
        O_BRAM_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd4))) begin
        O_BRAM_4_we1 = 1'b1;
    end else begin
        O_BRAM_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_5_ce0 = 1'b1;
    end else begin
        O_BRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_5_ce1 = 1'b1;
    end else begin
        O_BRAM_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd5))) begin
        O_BRAM_5_we1 = 1'b1;
    end else begin
        O_BRAM_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_6_ce0 = 1'b1;
    end else begin
        O_BRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_6_ce1 = 1'b1;
    end else begin
        O_BRAM_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd6))) begin
        O_BRAM_6_we1 = 1'b1;
    end else begin
        O_BRAM_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_7_ce0 = 1'b1;
    end else begin
        O_BRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        O_BRAM_7_ce1 = 1'b1;
    end else begin
        O_BRAM_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_452 == 3'd7))) begin
        O_BRAM_7_we1 = 1'b1;
    end else begin
        O_BRAM_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_325_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_244_p4 = tmp_7_mid2_v_reg_471;
    end else begin
        ap_phi_mux_j_phi_fu_244_p4 = j_reg_240;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_ofmap_TREADY == 1'b0)) begin
        ap_sig_ioackin_ofmap_TREADY = ofmap_TREADY;
    end else begin
        ap_sig_ioackin_ofmap_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_flatten_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ofmap_TDATA_blk_n = ofmap_TREADY;
    end else begin
        ofmap_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_ofmap_TREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_flatten_reg_462 == 1'd0))) begin
        ofmap_TVALID = 1'b1;
    end else begin
        ofmap_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_325_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_325_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign O_BRAM_0_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_0_address1 = O_BRAM_0_addr_reg_487;

assign O_BRAM_0_d1 = 16'd0;

assign O_BRAM_1_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_1_address1 = O_BRAM_1_addr_reg_493;

assign O_BRAM_1_d1 = 16'd0;

assign O_BRAM_2_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_2_address1 = O_BRAM_2_addr_reg_499;

assign O_BRAM_2_d1 = 16'd0;

assign O_BRAM_3_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_3_address1 = O_BRAM_3_addr_reg_505;

assign O_BRAM_3_d1 = 16'd0;

assign O_BRAM_4_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_4_address1 = O_BRAM_4_addr_reg_511;

assign O_BRAM_4_d1 = 16'd0;

assign O_BRAM_5_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_5_address1 = O_BRAM_5_addr_reg_517;

assign O_BRAM_5_d1 = 16'd0;

assign O_BRAM_6_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_6_address1 = O_BRAM_6_addr_reg_523;

assign O_BRAM_6_d1 = 16'd0;

assign O_BRAM_7_address0 = tmp_7_cast_fu_384_p1;

assign O_BRAM_7_address1 = O_BRAM_7_addr_reg_529;

assign O_BRAM_7_d1 = 16'd0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_ofmap_TREADY == 1'b0) & (ap_reg_pp0_iter1_exitcond_flatten_reg_462 == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_319_p1 = bound_fu_319_p10;

assign bound_fu_319_p10 = $unsigned(tmp_5_cast_fu_312_p1);

assign bound_fu_319_p2 = (37'd27 * bound_fu_319_p1);

assign exitcond_flatten_fu_325_p2 = ((indvar_flatten_reg_229 == bound_reg_457) ? 1'b1 : 1'b0);

assign f_cast1_cast1_fu_264_p1 = $unsigned(f_cast2_fu_260_p1);

assign f_cast1_cast_fu_268_p1 = $unsigned(f_cast2_fu_260_p1);

assign f_cast1_fu_302_p1 = $unsigned(f_cast2_reg_425);

assign f_cast2_fu_260_p1 = $signed(f);

assign grp_fu_417_p0 = 11'd27;

assign grp_fu_417_p1 = grp_fu_417_p10;

assign grp_fu_417_p10 = tmp_7_mid2_v_reg_471;

assign indvar_flatten_next_fu_330_p2 = (indvar_flatten_reg_229 + 37'd1);

assign j_1_fu_336_p2 = (5'd1 + ap_phi_mux_j_phi_fu_244_p4);

assign k_1_fu_375_p2 = (k_mid2_fu_347_p3 + 32'd1);

assign k_mid2_fu_347_p3 = ((tmp_s_fu_342_p2[0:0] === 1'b1) ? k_reg_251 : f_cast1_reg_441);

assign ofmap_TDATA = tmp_3_fu_395_p10;

assign smax1_cast_fu_292_p1 = smax1_fu_284_p3;

assign smax1_fu_284_p3 = ((tmp_4_fu_278_p2[0:0] === 1'b1) ? f_cast1_cast1_fu_264_p1 : tmp_1_fu_272_p2);

assign tmp_10_fu_369_p2 = (tmp_8_fu_362_p1 - tmp_9_fu_366_p1);

assign tmp_1_cast_fu_305_p1 = tmp_1_reg_431;

assign tmp_1_fu_272_p2 = (6'd27 + f_cast1_cast1_fu_264_p1);

assign tmp_2_fu_308_p1 = m[2:0];

assign tmp_4_fu_278_p2 = ((f_cast1_cast1_fu_264_p1 > tmp_1_fu_272_p2) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_312_p1 = $signed(tmp_5_reg_436);

assign tmp_5_fu_296_p2 = (smax1_cast_fu_292_p1 - f_cast1_cast_fu_268_p1);

assign tmp_7_cast_fu_384_p1 = $signed(grp_fu_417_p3);

assign tmp_7_mid2_v_fu_354_p3 = ((tmp_s_fu_342_p2[0:0] === 1'b1) ? ap_phi_mux_j_phi_fu_244_p4 : j_1_fu_336_p2);

assign tmp_8_fu_362_p1 = k_mid2_fu_347_p3[10:0];

assign tmp_9_fu_366_p1 = $unsigned(f_cast2_reg_425);

assign tmp_s_fu_342_p2 = (($signed(k_reg_251) < $signed(tmp_1_cast_reg_447)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    f_cast1_reg_441[31:5] <= 27'b000000000000000000000000000;
    tmp_1_cast_reg_447[31:6] <= 26'b00000000000000000000000000;
end

endmodule //data_transfer_ofo
