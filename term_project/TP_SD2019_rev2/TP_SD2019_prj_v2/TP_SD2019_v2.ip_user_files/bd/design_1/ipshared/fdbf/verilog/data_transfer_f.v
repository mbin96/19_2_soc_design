// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_transfer_f (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fmap_TDATA,
        fmap_TVALID,
        fmap_TREADY,
        W_BRAM_0_0_address0,
        W_BRAM_0_0_ce0,
        W_BRAM_0_0_we0,
        W_BRAM_0_0_d0,
        W_BRAM_0_1_address0,
        W_BRAM_0_1_ce0,
        W_BRAM_0_1_we0,
        W_BRAM_0_1_d0,
        W_BRAM_1_0_address0,
        W_BRAM_1_0_ce0,
        W_BRAM_1_0_we0,
        W_BRAM_1_0_d0,
        W_BRAM_1_1_address0,
        W_BRAM_1_1_ce0,
        W_BRAM_1_1_we0,
        W_BRAM_1_1_d0,
        W_BRAM_2_0_address0,
        W_BRAM_2_0_ce0,
        W_BRAM_2_0_we0,
        W_BRAM_2_0_d0,
        W_BRAM_2_1_address0,
        W_BRAM_2_1_ce0,
        W_BRAM_2_1_we0,
        W_BRAM_2_1_d0,
        W_BRAM_3_0_address0,
        W_BRAM_3_0_ce0,
        W_BRAM_3_0_we0,
        W_BRAM_3_0_d0,
        W_BRAM_3_1_address0,
        W_BRAM_3_1_ce0,
        W_BRAM_3_1_we0,
        W_BRAM_3_1_d0,
        W_BRAM_4_0_address0,
        W_BRAM_4_0_ce0,
        W_BRAM_4_0_we0,
        W_BRAM_4_0_d0,
        W_BRAM_4_1_address0,
        W_BRAM_4_1_ce0,
        W_BRAM_4_1_we0,
        W_BRAM_4_1_d0,
        W_BRAM_5_0_address0,
        W_BRAM_5_0_ce0,
        W_BRAM_5_0_we0,
        W_BRAM_5_0_d0,
        W_BRAM_5_1_address0,
        W_BRAM_5_1_ce0,
        W_BRAM_5_1_we0,
        W_BRAM_5_1_d0,
        W_BRAM_6_0_address0,
        W_BRAM_6_0_ce0,
        W_BRAM_6_0_we0,
        W_BRAM_6_0_d0,
        W_BRAM_6_1_address0,
        W_BRAM_6_1_ce0,
        W_BRAM_6_1_we0,
        W_BRAM_6_1_d0,
        W_BRAM_7_0_address0,
        W_BRAM_7_0_ce0,
        W_BRAM_7_0_we0,
        W_BRAM_7_0_d0,
        W_BRAM_7_1_address0,
        W_BRAM_7_1_ce0,
        W_BRAM_7_1_we0,
        W_BRAM_7_1_d0,
        m,
        c
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] fmap_TDATA;
input   fmap_TVALID;
output   fmap_TREADY;
output  [4:0] W_BRAM_0_0_address0;
output   W_BRAM_0_0_ce0;
output   W_BRAM_0_0_we0;
output  [15:0] W_BRAM_0_0_d0;
output  [4:0] W_BRAM_0_1_address0;
output   W_BRAM_0_1_ce0;
output   W_BRAM_0_1_we0;
output  [15:0] W_BRAM_0_1_d0;
output  [4:0] W_BRAM_1_0_address0;
output   W_BRAM_1_0_ce0;
output   W_BRAM_1_0_we0;
output  [15:0] W_BRAM_1_0_d0;
output  [4:0] W_BRAM_1_1_address0;
output   W_BRAM_1_1_ce0;
output   W_BRAM_1_1_we0;
output  [15:0] W_BRAM_1_1_d0;
output  [4:0] W_BRAM_2_0_address0;
output   W_BRAM_2_0_ce0;
output   W_BRAM_2_0_we0;
output  [15:0] W_BRAM_2_0_d0;
output  [4:0] W_BRAM_2_1_address0;
output   W_BRAM_2_1_ce0;
output   W_BRAM_2_1_we0;
output  [15:0] W_BRAM_2_1_d0;
output  [4:0] W_BRAM_3_0_address0;
output   W_BRAM_3_0_ce0;
output   W_BRAM_3_0_we0;
output  [15:0] W_BRAM_3_0_d0;
output  [4:0] W_BRAM_3_1_address0;
output   W_BRAM_3_1_ce0;
output   W_BRAM_3_1_we0;
output  [15:0] W_BRAM_3_1_d0;
output  [4:0] W_BRAM_4_0_address0;
output   W_BRAM_4_0_ce0;
output   W_BRAM_4_0_we0;
output  [15:0] W_BRAM_4_0_d0;
output  [4:0] W_BRAM_4_1_address0;
output   W_BRAM_4_1_ce0;
output   W_BRAM_4_1_we0;
output  [15:0] W_BRAM_4_1_d0;
output  [4:0] W_BRAM_5_0_address0;
output   W_BRAM_5_0_ce0;
output   W_BRAM_5_0_we0;
output  [15:0] W_BRAM_5_0_d0;
output  [4:0] W_BRAM_5_1_address0;
output   W_BRAM_5_1_ce0;
output   W_BRAM_5_1_we0;
output  [15:0] W_BRAM_5_1_d0;
output  [4:0] W_BRAM_6_0_address0;
output   W_BRAM_6_0_ce0;
output   W_BRAM_6_0_we0;
output  [15:0] W_BRAM_6_0_d0;
output  [4:0] W_BRAM_6_1_address0;
output   W_BRAM_6_1_ce0;
output   W_BRAM_6_1_we0;
output  [15:0] W_BRAM_6_1_d0;
output  [4:0] W_BRAM_7_0_address0;
output   W_BRAM_7_0_ce0;
output   W_BRAM_7_0_we0;
output  [15:0] W_BRAM_7_0_d0;
output  [4:0] W_BRAM_7_1_address0;
output   W_BRAM_7_1_ce0;
output   W_BRAM_7_1_we0;
output  [15:0] W_BRAM_7_1_d0;
input  [7:0] m;
input  [6:0] c;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fmap_TREADY;
reg W_BRAM_0_0_ce0;
reg W_BRAM_0_0_we0;
reg W_BRAM_0_1_ce0;
reg W_BRAM_0_1_we0;
reg W_BRAM_1_0_ce0;
reg W_BRAM_1_0_we0;
reg W_BRAM_1_1_ce0;
reg W_BRAM_1_1_we0;
reg W_BRAM_2_0_ce0;
reg W_BRAM_2_0_we0;
reg W_BRAM_2_1_ce0;
reg W_BRAM_2_1_we0;
reg W_BRAM_3_0_ce0;
reg W_BRAM_3_0_we0;
reg W_BRAM_3_1_ce0;
reg W_BRAM_3_1_we0;
reg W_BRAM_4_0_ce0;
reg W_BRAM_4_0_we0;
reg W_BRAM_4_1_ce0;
reg W_BRAM_4_1_we0;
reg W_BRAM_5_0_ce0;
reg W_BRAM_5_0_we0;
reg W_BRAM_5_1_ce0;
reg W_BRAM_5_1_we0;
reg W_BRAM_6_0_ce0;
reg W_BRAM_6_0_we0;
reg W_BRAM_6_1_ce0;
reg W_BRAM_6_1_we0;
reg W_BRAM_7_0_ce0;
reg W_BRAM_7_0_we0;
reg W_BRAM_7_1_ce0;
reg W_BRAM_7_1_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fmap_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_flatten2_fu_490_p2;
wire   [0:0] tmp_28_fu_383_p1;
reg   [0:0] tmp_28_reg_655;
wire   [6:0] tmp_8_fu_411_p2;
reg   [6:0] tmp_8_reg_661;
wire    ap_CS_fsm_state2;
wire   [2:0] tmp_27_fu_427_p1;
reg   [2:0] tmp_27_reg_671;
wire   [36:0] bound_fu_438_p2;
reg   [36:0] bound_reg_676;
wire   [8:0] tmp_10_fu_462_p2;
reg   [8:0] tmp_10_reg_682;
wire   [31:0] c_cast2_fu_468_p1;
reg   [31:0] c_cast2_reg_687;
wire    ap_CS_fsm_state3;
wire   [31:0] m_cast1_fu_471_p1;
wire   [68:0] bound7_fu_484_p2;
reg   [68:0] bound7_reg_698;
wire   [68:0] indvar_flatten_next2_fu_495_p2;
reg    ap_block_state4;
wire   [31:0] tmp_31_t_mid2_v_v_fu_519_p3;
wire   [31:0] j1_mid2_fu_602_p3;
wire   [4:0] k1_1_fu_630_p2;
wire   [36:0] indvar_flatten_next_fu_642_p3;
reg   [68:0] indvar_flatten2_reg_328;
reg   [31:0] i1_reg_339;
reg   [36:0] indvar_flatten_reg_348;
reg   [31:0] j1_reg_359;
reg   [4:0] k1_reg_368;
wire   [63:0] tmp_2_fu_610_p1;
wire   [2:0] tmp_31_t_mid2_fu_531_p2;
wire   [0:0] tmp_35_t_mid2_fu_597_p2;
wire   [5:0] tmp_26_fu_379_p1;
wire   [5:0] tmp_s_fu_387_p2;
wire   [0:0] tmp_7_fu_393_p2;
wire   [5:0] smax1_fu_399_p3;
wire   [6:0] smax1_cast_fu_407_p1;
wire  signed [31:0] tmp_22_cast_fu_431_p1;
wire   [31:0] bound_fu_438_p1;
wire   [7:0] tmp_fu_421_p2;
wire   [0:0] tmp_9_fu_444_p2;
wire   [7:0] smax4_fu_450_p3;
wire   [8:0] smax4_cast_fu_458_p1;
wire   [8:0] m_cast1_cast_fu_417_p1;
wire  signed [31:0] tmp_24_cast_fu_474_p1;
wire   [31:0] bound7_fu_484_p0;
wire   [36:0] bound7_fu_484_p1;
wire   [0:0] exitcond_flatten_fu_507_p2;
wire   [31:0] i1_1_fu_501_p2;
wire   [2:0] tmp_29_fu_527_p1;
wire   [0:0] tmp_30_fu_536_p1;
wire   [0:0] exitcond_fu_553_p2;
wire   [0:0] not_exitcond_flatten_fu_547_p2;
wire   [31:0] j1_mid_fu_512_p3;
wire   [0:0] exitcond_mid_fu_559_p2;
wire   [0:0] tmp_11_fu_571_p2;
wire   [31:0] j1_1_fu_565_p2;
wire   [0:0] tmp_31_fu_585_p1;
wire   [0:0] tmp_35_t_mid215_v_fu_540_p3;
wire   [0:0] tmp_35_t_mid2_v_fu_589_p3;
wire   [4:0] k1_mid2_fu_577_p3;
wire   [36:0] indvar_flatten_op_fu_636_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
wire   [68:0] bound7_fu_484_p00;
wire   [68:0] bound7_fu_484_p10;
wire   [36:0] bound_fu_438_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        i1_reg_339 <= tmp_31_t_mid2_v_v_fu_519_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_reg_339 <= m_cast1_fu_471_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        indvar_flatten2_reg_328 <= indvar_flatten_next2_fu_495_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten2_reg_328 <= 69'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        indvar_flatten_reg_348 <= indvar_flatten_next_fu_642_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_348 <= 37'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        j1_reg_359 <= j1_mid2_fu_602_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j1_reg_359 <= c_cast2_fu_468_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        k1_reg_368 <= k1_1_fu_630_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k1_reg_368 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound7_reg_698 <= bound7_fu_484_p2;
        c_cast2_reg_687[6 : 0] <= c_cast2_fu_468_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_676 <= bound_fu_438_p2;
        tmp_10_reg_682 <= tmp_10_fu_462_p2;
        tmp_27_reg_671 <= tmp_27_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_28_reg_655 <= tmp_28_fu_383_p1;
        tmp_8_reg_661 <= tmp_8_fu_411_p2;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_0_0_ce0 = 1'b1;
    end else begin
        W_BRAM_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_0_0_we0 = 1'b1;
    end else begin
        W_BRAM_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_0_1_ce0 = 1'b1;
    end else begin
        W_BRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd0) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_0_1_we0 = 1'b1;
    end else begin
        W_BRAM_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_1_0_ce0 = 1'b1;
    end else begin
        W_BRAM_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd1) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_1_0_we0 = 1'b1;
    end else begin
        W_BRAM_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_1_1_ce0 = 1'b1;
    end else begin
        W_BRAM_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd1) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_1_1_we0 = 1'b1;
    end else begin
        W_BRAM_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_2_0_ce0 = 1'b1;
    end else begin
        W_BRAM_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd2) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_2_0_we0 = 1'b1;
    end else begin
        W_BRAM_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_2_1_ce0 = 1'b1;
    end else begin
        W_BRAM_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd2) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_2_1_we0 = 1'b1;
    end else begin
        W_BRAM_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_3_0_ce0 = 1'b1;
    end else begin
        W_BRAM_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd3) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_3_0_we0 = 1'b1;
    end else begin
        W_BRAM_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_3_1_ce0 = 1'b1;
    end else begin
        W_BRAM_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd3) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_3_1_we0 = 1'b1;
    end else begin
        W_BRAM_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_4_0_ce0 = 1'b1;
    end else begin
        W_BRAM_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd4) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_4_0_we0 = 1'b1;
    end else begin
        W_BRAM_4_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_4_1_ce0 = 1'b1;
    end else begin
        W_BRAM_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd4) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_4_1_we0 = 1'b1;
    end else begin
        W_BRAM_4_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_5_0_ce0 = 1'b1;
    end else begin
        W_BRAM_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd5) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_5_0_we0 = 1'b1;
    end else begin
        W_BRAM_5_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_5_1_ce0 = 1'b1;
    end else begin
        W_BRAM_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd5) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_5_1_we0 = 1'b1;
    end else begin
        W_BRAM_5_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_6_0_ce0 = 1'b1;
    end else begin
        W_BRAM_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd6) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_6_0_we0 = 1'b1;
    end else begin
        W_BRAM_6_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_6_1_ce0 = 1'b1;
    end else begin
        W_BRAM_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd6) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_6_1_we0 = 1'b1;
    end else begin
        W_BRAM_6_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_7_0_ce0 = 1'b1;
    end else begin
        W_BRAM_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_31_t_mid2_fu_531_p2 == 3'd7) & (1'b1 == ap_CS_fsm_state4) & (tmp_35_t_mid2_fu_597_p2 == 1'd0) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_7_0_we0 = 1'b1;
    end else begin
        W_BRAM_7_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        W_BRAM_7_1_ce0 = 1'b1;
    end else begin
        W_BRAM_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (tmp_35_t_mid2_fu_597_p2 == 1'd1) & (tmp_31_t_mid2_fu_531_p2 == 3'd7) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        W_BRAM_7_1_we0 = 1'b1;
    end else begin
        W_BRAM_7_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        fmap_TDATA_blk_n = fmap_TVALID;
    end else begin
        fmap_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
        fmap_TREADY = 1'b1;
    end else begin
        fmap_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_flatten2_fu_490_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_BRAM_0_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_0_0_d0 = fmap_TDATA;

assign W_BRAM_0_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_0_1_d0 = fmap_TDATA;

assign W_BRAM_1_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_1_0_d0 = fmap_TDATA;

assign W_BRAM_1_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_1_1_d0 = fmap_TDATA;

assign W_BRAM_2_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_2_0_d0 = fmap_TDATA;

assign W_BRAM_2_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_2_1_d0 = fmap_TDATA;

assign W_BRAM_3_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_3_0_d0 = fmap_TDATA;

assign W_BRAM_3_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_3_1_d0 = fmap_TDATA;

assign W_BRAM_4_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_4_0_d0 = fmap_TDATA;

assign W_BRAM_4_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_4_1_d0 = fmap_TDATA;

assign W_BRAM_5_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_5_0_d0 = fmap_TDATA;

assign W_BRAM_5_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_5_1_d0 = fmap_TDATA;

assign W_BRAM_6_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_6_0_d0 = fmap_TDATA;

assign W_BRAM_6_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_6_1_d0 = fmap_TDATA;

assign W_BRAM_7_0_address0 = tmp_2_fu_610_p1;

assign W_BRAM_7_0_d0 = fmap_TDATA;

assign W_BRAM_7_1_address0 = tmp_2_fu_610_p1;

assign W_BRAM_7_1_d0 = fmap_TDATA;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4 = ((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_490_p2 == 1'd0));
end

assign bound7_fu_484_p0 = bound7_fu_484_p00;

assign bound7_fu_484_p00 = $unsigned(tmp_24_cast_fu_474_p1);

assign bound7_fu_484_p1 = bound7_fu_484_p10;

assign bound7_fu_484_p10 = bound_reg_676;

assign bound7_fu_484_p2 = (bound7_fu_484_p0 * bound7_fu_484_p1);

assign bound_fu_438_p1 = bound_fu_438_p10;

assign bound_fu_438_p10 = $unsigned(tmp_22_cast_fu_431_p1);

assign bound_fu_438_p2 = (37'd25 * bound_fu_438_p1);

assign c_cast2_fu_468_p1 = c;

assign exitcond_flatten2_fu_490_p2 = ((indvar_flatten2_reg_328 == bound7_reg_698) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_507_p2 = ((indvar_flatten_reg_348 == bound_reg_676) ? 1'b1 : 1'b0);

assign exitcond_fu_553_p2 = ((k1_reg_368 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_559_p2 = (not_exitcond_flatten_fu_547_p2 & exitcond_fu_553_p2);

assign i1_1_fu_501_p2 = (32'd1 + i1_reg_339);

assign indvar_flatten_next2_fu_495_p2 = (indvar_flatten2_reg_328 + 69'd1);

assign indvar_flatten_next_fu_642_p3 = ((exitcond_flatten_fu_507_p2[0:0] === 1'b1) ? 37'd1 : indvar_flatten_op_fu_636_p2);

assign indvar_flatten_op_fu_636_p2 = (indvar_flatten_reg_348 + 37'd1);

assign j1_1_fu_565_p2 = (32'd1 + j1_mid_fu_512_p3);

assign j1_mid2_fu_602_p3 = ((exitcond_mid_fu_559_p2[0:0] === 1'b1) ? j1_1_fu_565_p2 : j1_mid_fu_512_p3);

assign j1_mid_fu_512_p3 = ((exitcond_flatten_fu_507_p2[0:0] === 1'b1) ? c_cast2_reg_687 : j1_reg_359);

assign k1_1_fu_630_p2 = (k1_mid2_fu_577_p3 + 5'd1);

assign k1_mid2_fu_577_p3 = ((tmp_11_fu_571_p2[0:0] === 1'b1) ? 5'd0 : k1_reg_368);

assign m_cast1_cast_fu_417_p1 = m;

assign m_cast1_fu_471_p1 = m;

assign not_exitcond_flatten_fu_547_p2 = (exitcond_flatten_fu_507_p2 ^ 1'd1);

assign smax1_cast_fu_407_p1 = smax1_fu_399_p3;

assign smax1_fu_399_p3 = ((tmp_7_fu_393_p2[0:0] === 1'b1) ? tmp_26_fu_379_p1 : tmp_s_fu_387_p2);

assign smax4_cast_fu_458_p1 = smax4_fu_450_p3;

assign smax4_fu_450_p3 = ((tmp_9_fu_444_p2[0:0] === 1'b1) ? m : tmp_fu_421_p2);

assign tmp_10_fu_462_p2 = (smax4_cast_fu_458_p1 - m_cast1_cast_fu_417_p1);

assign tmp_11_fu_571_p2 = (exitcond_mid_fu_559_p2 | exitcond_flatten_fu_507_p2);

assign tmp_22_cast_fu_431_p1 = $signed(tmp_8_reg_661);

assign tmp_24_cast_fu_474_p1 = $signed(tmp_10_reg_682);

assign tmp_26_fu_379_p1 = c[5:0];

assign tmp_27_fu_427_p1 = m[2:0];

assign tmp_28_fu_383_p1 = c[0:0];

assign tmp_29_fu_527_p1 = tmp_31_t_mid2_v_v_fu_519_p3[2:0];

assign tmp_2_fu_610_p1 = k1_mid2_fu_577_p3;

assign tmp_30_fu_536_p1 = j1_reg_359[0:0];

assign tmp_31_fu_585_p1 = j1_1_fu_565_p2[0:0];

assign tmp_31_t_mid2_fu_531_p2 = (tmp_29_fu_527_p1 - tmp_27_reg_671);

assign tmp_31_t_mid2_v_v_fu_519_p3 = ((exitcond_flatten_fu_507_p2[0:0] === 1'b1) ? i1_1_fu_501_p2 : i1_reg_339);

assign tmp_35_t_mid215_v_fu_540_p3 = ((exitcond_flatten_fu_507_p2[0:0] === 1'b1) ? tmp_28_reg_655 : tmp_30_fu_536_p1);

assign tmp_35_t_mid2_fu_597_p2 = (tmp_35_t_mid2_v_fu_589_p3 ^ tmp_28_reg_655);

assign tmp_35_t_mid2_v_fu_589_p3 = ((exitcond_mid_fu_559_p2[0:0] === 1'b1) ? tmp_31_fu_585_p1 : tmp_35_t_mid215_v_fu_540_p3);

assign tmp_7_fu_393_p2 = ((tmp_26_fu_379_p1 > tmp_s_fu_387_p2) ? 1'b1 : 1'b0);

assign tmp_8_fu_411_p2 = (smax1_cast_fu_407_p1 - c);

assign tmp_9_fu_444_p2 = ((m > tmp_fu_421_p2) ? 1'b1 : 1'b0);

assign tmp_fu_421_p2 = (8'd8 + m);

assign tmp_s_fu_387_p2 = (6'd2 + tmp_26_fu_379_p1);

always @ (posedge ap_clk) begin
    c_cast2_reg_687[31:7] <= 25'b0000000000000000000000000;
end

endmodule //data_transfer_f
