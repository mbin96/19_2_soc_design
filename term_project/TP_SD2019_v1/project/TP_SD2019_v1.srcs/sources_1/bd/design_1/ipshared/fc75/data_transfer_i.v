// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_transfer_i (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ifmap_TDATA,
        ifmap_TVALID,
        ifmap_TREADY,
        I_BRAM_address0,
        I_BRAM_ce0,
        I_BRAM_we0,
        I_BRAM_d0,
        c,
        f
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] ifmap_TDATA;
input   ifmap_TVALID;
output   ifmap_TREADY;
output  [7:0] I_BRAM_address0;
output   I_BRAM_ce0;
output   I_BRAM_we0;
output  [15:0] I_BRAM_d0;
input  [8:0] c;
input  [2:0] f;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ifmap_TREADY;
reg I_BRAM_ce0;
reg I_BRAM_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ifmap_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten1_fu_215_p2;
wire  signed [3:0] f_cast_fu_131_p1;
reg  signed [3:0] f_cast_reg_346;
wire   [31:0] f_cast2_fu_135_p1;
reg   [31:0] f_cast2_reg_351;
wire   [31:0] tmp_s_fu_163_p1;
reg   [31:0] tmp_s_reg_358;
wire   [67:0] bound6_fu_203_p2;
reg   [67:0] bound6_reg_363;
wire   [0:0] exitcond1_mid_fu_209_p2;
reg   [0:0] exitcond1_mid_reg_368;
wire   [67:0] indvar_flatten_next1_fu_220_p2;
reg    ap_block_state2;
wire   [3:0] tmp_2_mid2_fu_272_p3;
wire   [31:0] k_2_fu_326_p2;
wire   [35:0] indvar_flatten_next_fu_338_p3;
reg   [67:0] indvar_flatten1_reg_89;
reg   [35:0] indvar_flatten_reg_100;
reg   [3:0] j_reg_111;
reg   [31:0] k_reg_122;
wire   [63:0] tmp_16_cast_fu_321_p1;
wire   [4:0] f_cast2_cast1_fu_139_p1;
wire   [4:0] tmp_9_fu_157_p2;
wire   [8:0] tmp_fu_151_p2;
wire   [0:0] tmp_1_fu_171_p2;
wire   [8:0] smax3_fu_177_p3;
wire   [9:0] smax3_cast_fu_185_p1;
wire   [9:0] c_cast1_cast_fu_147_p1;
wire   [9:0] tmp_2_fu_189_p2;
wire  signed [31:0] tmp_13_cast_fu_195_p1;
wire   [31:0] bound6_fu_203_p0;
wire   [5:0] f_cast2_cast_fu_143_p1;
wire   [5:0] tmp_10_cast_fu_167_p1;
wire   [0:0] exitcond_flatten8_fu_226_p2;
wire   [0:0] exitcond_fu_247_p2;
wire   [3:0] j_mid_fu_232_p3;
wire   [0:0] exitcond1_mid1_fu_252_p3;
wire   [31:0] k_mid_fu_240_p3;
wire   [3:0] j_2_fu_259_p2;
wire   [7:0] tmp_11_fu_284_p3;
wire   [8:0] p_shl1_cast_fu_292_p1;
wire   [8:0] tmp_2_mid2_cast_fu_280_p1;
wire   [31:0] k_mid2_fu_265_p3;
wire   [8:0] tmp_12_fu_302_p1;
wire   [8:0] tmp_13_fu_306_p1;
wire   [8:0] tmp_3_fu_296_p2;
wire   [8:0] tmp_14_fu_309_p2;
wire   [8:0] tmp_5_fu_315_p2;
wire   [35:0] indvar_flatten_op_fu_332_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
wire   [67:0] bound6_fu_203_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten1_reg_89 <= indvar_flatten_next1_fu_220_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten1_reg_89 <= 68'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_100 <= indvar_flatten_next_fu_338_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_100 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_111 <= tmp_2_mid2_fu_272_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_111 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_122 <= k_2_fu_326_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_122 <= f_cast2_fu_135_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bound6_reg_363 <= bound6_fu_203_p2;
        exitcond1_mid_reg_368 <= exitcond1_mid_fu_209_p2;
        f_cast2_reg_351[3 : 0] <= f_cast2_fu_135_p1[3 : 0];
        f_cast_reg_346 <= f_cast_fu_131_p1;
        tmp_s_reg_358[4 : 0] <= tmp_s_fu_163_p1[4 : 0];
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        I_BRAM_ce0 = 1'b1;
    end else begin
        I_BRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        I_BRAM_we0 = 1'b1;
    end else begin
        I_BRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifmap_TDATA_blk_n = ifmap_TVALID;
    end else begin
        ifmap_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifmap_TREADY = 1'b1;
    end else begin
        ifmap_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0)) & (exitcond_flatten1_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_BRAM_address0 = tmp_16_cast_fu_321_p1;

assign I_BRAM_d0 = ifmap_TDATA;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((exitcond_flatten1_fu_215_p2 == 1'd0) & (ifmap_TVALID == 1'b0));
end

assign bound6_fu_203_p0 = bound6_fu_203_p00;

assign bound6_fu_203_p00 = $unsigned(tmp_13_cast_fu_195_p1);

assign bound6_fu_203_p2 = (bound6_fu_203_p0 * $signed('hE1));

assign c_cast1_cast_fu_147_p1 = c;

assign exitcond1_mid1_fu_252_p3 = ((exitcond_flatten8_fu_226_p2[0:0] === 1'b1) ? exitcond1_mid_reg_368 : exitcond_fu_247_p2);

assign exitcond1_mid_fu_209_p2 = ((f_cast2_cast_fu_143_p1 != tmp_10_cast_fu_167_p1) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_215_p2 = ((indvar_flatten1_reg_89 == bound6_reg_363) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_226_p2 = ((indvar_flatten_reg_100 == 36'd225) ? 1'b1 : 1'b0);

assign exitcond_fu_247_p2 = ((k_reg_122 != tmp_s_reg_358) ? 1'b1 : 1'b0);

assign f_cast2_cast1_fu_139_p1 = $unsigned(f_cast_fu_131_p1);

assign f_cast2_cast_fu_143_p1 = $unsigned(f_cast_fu_131_p1);

assign f_cast2_fu_135_p1 = $unsigned(f_cast_fu_131_p1);

assign f_cast_fu_131_p1 = $signed(f);

assign indvar_flatten_next1_fu_220_p2 = (indvar_flatten1_reg_89 + 68'd1);

assign indvar_flatten_next_fu_338_p3 = ((exitcond_flatten8_fu_226_p2[0:0] === 1'b1) ? 36'd1 : indvar_flatten_op_fu_332_p2);

assign indvar_flatten_op_fu_332_p2 = (36'd1 + indvar_flatten_reg_100);

assign j_2_fu_259_p2 = (4'd1 + j_mid_fu_232_p3);

assign j_mid_fu_232_p3 = ((exitcond_flatten8_fu_226_p2[0:0] === 1'b1) ? 4'd0 : j_reg_111);

assign k_2_fu_326_p2 = (32'd1 + k_mid2_fu_265_p3);

assign k_mid2_fu_265_p3 = ((exitcond1_mid1_fu_252_p3[0:0] === 1'b1) ? k_mid_fu_240_p3 : f_cast2_reg_351);

assign k_mid_fu_240_p3 = ((exitcond_flatten8_fu_226_p2[0:0] === 1'b1) ? f_cast2_reg_351 : k_reg_122);

assign p_shl1_cast_fu_292_p1 = tmp_11_fu_284_p3;

assign smax3_cast_fu_185_p1 = smax3_fu_177_p3;

assign smax3_fu_177_p3 = ((tmp_1_fu_171_p2[0:0] === 1'b1) ? c : tmp_fu_151_p2);

assign tmp_10_cast_fu_167_p1 = tmp_9_fu_157_p2;

assign tmp_11_fu_284_p3 = {{tmp_2_mid2_fu_272_p3}, {4'd0}};

assign tmp_12_fu_302_p1 = k_mid2_fu_265_p3[8:0];

assign tmp_13_cast_fu_195_p1 = $signed(tmp_2_fu_189_p2);

assign tmp_13_fu_306_p1 = $unsigned(f_cast_reg_346);

assign tmp_14_fu_309_p2 = (tmp_12_fu_302_p1 - tmp_13_fu_306_p1);

assign tmp_16_cast_fu_321_p1 = tmp_5_fu_315_p2;

assign tmp_1_fu_171_p2 = ((c > tmp_fu_151_p2) ? 1'b1 : 1'b0);

assign tmp_2_fu_189_p2 = (smax3_cast_fu_185_p1 - c_cast1_cast_fu_147_p1);

assign tmp_2_mid2_cast_fu_280_p1 = tmp_2_mid2_fu_272_p3;

assign tmp_2_mid2_fu_272_p3 = ((exitcond1_mid1_fu_252_p3[0:0] === 1'b1) ? j_mid_fu_232_p3 : j_2_fu_259_p2);

assign tmp_3_fu_296_p2 = (p_shl1_cast_fu_292_p1 - tmp_2_mid2_cast_fu_280_p1);

assign tmp_5_fu_315_p2 = (tmp_3_fu_296_p2 + tmp_14_fu_309_p2);

assign tmp_9_fu_157_p2 = (f_cast2_cast1_fu_139_p1 + 5'd15);

assign tmp_fu_151_p2 = (c + 9'd1);

assign tmp_s_fu_163_p1 = tmp_9_fu_157_p2;

always @ (posedge ap_clk) begin
    f_cast2_reg_351[31:4] <= 28'b0000000000000000000000000000;
    tmp_s_reg_358[31:5] <= 27'b000000000000000000000000000;
end

endmodule //data_transfer_i
